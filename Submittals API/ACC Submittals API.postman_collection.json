{
	"info": {
		"_postman_id": "a4487c32-1a85-41f5-9198-6cf074aad6b5",
		"name": "ACC Submittals API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39082503"
	},
	"item": [
		{
			"name": "API References",
			"item": [
				{
					"name": "Run Firstly-Get Project ID",
					"item": [
						{
							"name": "GET one ACC account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// find the specified project and setup the environment variable \"hub_id\"",
											"const hub_name = pm.variables.get(\"hub_name\");",
											"pm.test(\"find matches account by name: \" + hub_name, function () {",
											"    const body = JSON.parse(responseBody);",
											"    const found = body.data.find(d => d.attributes.name == hub_name);",
											"",
											"    pm.expect(found).to.not.be.undefined;",
											"    ",
											"    pm.environment.set(\"hub_id\", found.id);",
											"    pm.environment.set(\"account_id\", found.id.split(\"b.\").join(\"\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"hub_name\", \"change to your hub/account name\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_domain}}/project/v1/hubs?filter[extension.type]=hubs:autodesk.bim360:Account",
									"host": [
										"{{base_domain}}"
									],
									"path": [
										"project",
										"v1",
										"hubs"
									],
									"query": [
										{
											"key": "filter[extension.type]",
											"value": "hubs:autodesk.bim360:Account"
										}
									]
								},
								"description": "Returns a collection of accessible hubs for this member.<br/>\nhttps://forge.autodesk.com/en/docs/data/v2/reference/http/hubs-GET/"
							},
							"response": []
						},
						{
							"name": "GET one ACC project",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"project_name\", \"change to your project name\");",
											"",
											"pm.environment.unset(\"project_id_without_b\");",
											"pm.environment.unset(\"item_id\");",
											"pm.environment.unset(\"attachment_id\");",
											"pm.environment.unset(\"user_id\");",
											"pm.environment.unset(\"item_type_id\");",
											"pm.environment.unset(\"response_id\");",
											"pm.environment.unset(\"spec_section_identifier\");",
											"pm.environment.unset(\"package_id\");",
											"pm.environment.unset(\"next_custom_identifier\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// find the specified project and setup the environment variable \"project_id\"",
											"const project_name = pm.variables.get(\"project_name\") ",
											"pm.test(\"find matches project by name: \" + project_name, function () {",
											"    const body = JSON.parse(responseBody);",
											"    const found = body.data.find(d => d.attributes.name == project_name)",
											"",
											"    pm.expect(found).to.not.be.undefined;",
											"    ",
											"    postman.setEnvironmentVariable(\"project_id\", found.id);",
											"    postman.setEnvironmentVariable(\"project_id_without_b\", found.id.split(\"b.\").join(\"\"));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_domain}}project/v1/hubs/{{hub_id}}/projects",
									"host": [
										"{{base_domain}}project"
									],
									"path": [
										"v1",
										"hubs",
										"{{hub_id}}",
										"projects"
									]
								},
								"description": "Returns a collection of projects for a given hub_id. A project represents a BIM 360 Team project, a Fusion Team project, a BIM 360 Docs project, or an A360 Personal project. Multiple projects can be created within a single hub.<br/>\nhttps://forge.autodesk.com/en/docs/data/v2/reference/http/hubs-hub_id-projects-GET/"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Attachments",
					"item": [
						{
							"name": "Submittals - GET Attachments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
											"    pm.expect(responseBody.results).to.be.an(\"array\");",
											"",
											"    if(responseBody.results.length > 0) {",
											"        pm.environment.set(\"attachment_id\", responseBody.results[0].id);",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/:itemId/attachments",
									"host": [
										"{{base_domain}}construction"
									],
									"path": [
										"submittals",
										"v2",
										"projects",
										":projectId",
										"items",
										":itemId",
										"attachments"
									],
									"query": [
										{
											"key": "limit",
											"value": "20",
											"description": "Maximal number of elements per page",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "20",
											"description": "Starting position of the query in relation to the complete set of items",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "categoryId desc",
											"description": "Comma-delimited list of fields to sort by in the format field asc/desc - id, isFileUploaded, asyncState, createdBy, createdAt, updatedBy, updatedAt, name, uploadUrn, urn, urnPage, resourceUrns, urnTypeId, urnVersion, revision, categoryId, isReview, isResponse",
											"disabled": true
										},
										{
											"key": "filter[categoryId]",
											"value": "5",
											"description": "Filter attachments by their category identifier. Separate multiple values with commas",
											"disabled": true
										},
										{
											"key": "filter[revision]",
											"value": "1",
											"description": "Filter attachments by their revision. Separate multiple values with commas",
											"disabled": true
										},
										{
											"key": "filter[isFileUploaded]",
											"value": "true",
											"description": "Filter attachments by whether they completed the upload process.",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project."
										},
										{
											"key": "itemId",
											"value": "{{item_id}}",
											"description": "The ID of the submittal item. To find the item ID, call GET items."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Submittals - POST attachments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.has.property('id');",
											"",
											"    pm.environment.set(\"attachment_id\", responseBody.id);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{attachment_name}}\",\n    \"urnTypeId\": \"2\",\n    \"urn\": \"{{attachment_urn}}\",\n    \"isFileUploaded\": true,\n    \"taskId\": \"{{review_step_task_id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/:itemId/attachments",
									"host": [
										"{{base_domain}}construction"
									],
									"path": [
										"submittals",
										"v2",
										"projects",
										":projectId",
										"items",
										":itemId",
										"attachments"
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project."
										},
										{
											"key": "itemId",
											"value": "{{item_id}}",
											"description": "The ID of the submittal item. To find the item ID, call GET items."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Submittals - PATH update attachment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.has.property('id');",
											"",
											"    pm.expect(responseBody).to.has.property('isFileUploaded').and.to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isFileUploaded\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/:itemId/attachments/:attachmentId",
									"host": [
										"{{base_domain}}construction"
									],
									"path": [
										"submittals",
										"v2",
										"projects",
										":projectId",
										"items",
										":itemId",
										"attachments",
										":attachmentId"
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project."
										},
										{
											"key": "itemId",
											"value": "{{item_id}}",
											"description": "The ID of the submittal item. To find the item ID, call GET items."
										},
										{
											"key": "attachmentId",
											"value": "{{attachment_id}}",
											"description": "The ID of the metadata object for the submittal."
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Items",
					"item": [
						{
							"name": "Submittals - GET Items",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
											"    pm.expect(responseBody.results).to.be.an(\"array\");",
											"",
											"    if(responseBody.results.length > 0) {",
											"        pm.environment.set(\"item_id\", responseBody.results[0].id);",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items",
									"host": [
										"{{base_domain}}construction"
									],
									"path": [
										"submittals",
										"v2",
										"projects",
										":projectId",
										"items"
									],
									"query": [
										{
											"key": "limit",
											"value": "2",
											"description": "Maximal number of elements per page",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "2",
											"description": "Starting position of the query in relation to the complete set of items",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "createdAt desc",
											"description": "Sort items by specified fields. Separate multiple values with commas. To sort in descending or ascending order, add desc or asc after the sort criteria. For example, statusId asc.\nPossible values: ballInCourtUsers, ballInCourtCompanies, ballInCourtRoles, ballInCourtType, customIdentifier, customIdentifierHumanReadable, createdAt, createdBy, description``, dueDate, id, identifier, leadTime, manager, managerType, managerDueDate, package.identifier, package.spec.identifier, packageId, packageIdentifier, packageSpecIdentifier, packageTitle, priority, publishedBy, publishedDate, receivedFromReview, receivedFromSubmitter, requiredApprovalDate, requiredDate, requiredOnJobDate, respondedAt, respondedBy, response.value, responseComment, responseId, revision, sentToReview, sentToReviewBy, sentToSubmitter, spec.identifier, specId, specIdentifier, specTitle, stateId, statusId, subcontractor, subcontractorType, submittedBy, submitterDueDate, subsection, title, type.value, typeId, updatedAt, updatedBy, watchers.",
											"disabled": true
										},
										{
											"key": "search",
											"value": "Test3",
											"description": "Search term in identifier, title, spec identifier, ball in court fields",
											"disabled": true
										},
										{
											"key": "filter[title]",
											"value": "Test3,Water Closet",
											"description": "Filter items by their title. Separate multiple values with commas",
											"disabled": true
										},
										{
											"key": "filter[statusId]",
											"value": "1",
											"description": "Filter items by their status id. Separate multiple values with commas",
											"disabled": true
										},
										{
											"key": "filter[specId]",
											"value": "{{spec_id}}",
											"description": "Filter items by their spec id. Separate multiple values with commas",
											"disabled": true
										},
										{
											"key": "filter[ballInCourtUsers]",
											"value": "T5PKRC57TLQ8",
											"description": "Filter items by their ball-in-court user id. Separate multiple values with commas",
											"disabled": true
										},
										{
											"key": "filter[ballInCourtCompanies]",
											"value": "237390714",
											"description": "Filter items by their ball-in-court company id. Separate multiple values with commas",
											"disabled": true
										},
										{
											"key": "filter[ballInCourtRoles]",
											"value": "237390721",
											"description": "Filter items by their ball-in-court role id. Separate multiple values with commas",
											"disabled": true
										},
										{
											"key": "filter[responseId]",
											"value": "{{response_id}}",
											"description": "Filter items by their response id. Separate multiple values with commas.",
											"disabled": true
										},
										{
											"key": "filter[typeId]",
											"value": "{{item_type_id}}",
											"description": "Filter items by their type id. Separate multiple values with commas.",
											"disabled": true
										},
										{
											"key": "filter[stateId]",
											"value": "sbc-2",
											"description": "Filter items by their state id. Separate multiple values with commas.",
											"disabled": true
										},
										{
											"key": "filter[identifier]",
											"value": "8",
											"description": "Filter items by their unique item identifier. Separate multiple values with commas",
											"disabled": true
										},
										{
											"key": "filter[leadTime]",
											"value": "5",
											"description": "Filter items by their lead time.",
											"disabled": true
										},
										{
											"key": "filter[revision]",
											"value": "0",
											"description": "Filter items by their revision. Separate multiple values with commas",
											"disabled": true
										},
										{
											"key": "filter[manager]",
											"value": "W8ZDPLUTSJKZ",
											"description": "Filter items by the Autodesk ID of the manager.",
											"disabled": true
										},
										{
											"key": "filter[managerType]",
											"value": "1",
											"description": "Filter items by the manager type.",
											"disabled": true
										},
										{
											"key": "filter[subcontractor]",
											"value": "T5PKRC57TLQ8",
											"description": "Filter items by the Autodesk ID of the subcontractor.",
											"disabled": true
										},
										{
											"key": "filter[subcontractorType]",
											"value": "2",
											"description": "Filter items by the subcontractor type.",
											"disabled": true
										},
										{
											"key": "filter[createdBy]",
											"value": "W8ZDPLUTSJKZ",
											"description": "Filter items by the Autodesk ID of the user that created the item.",
											"disabled": true
										},
										{
											"key": "filter[watchers]",
											"value": "W8ZDPLUTSJKZ",
											"description": "Filter items by the Autodesk ID of the watchers. Separate multiple values with commas.",
											"disabled": true
										},
										{
											"key": "filter[dueDate]",
											"value": "2023-09-13",
											"description": "Filter items by their due date, in the following URL-encoded format YYYY-MM-DD.",
											"disabled": true
										},
										{
											"key": "filter[submitterDueDate]",
											"value": "",
											"description": "Filter items by their submitter’s due date, in the following URL-encoded format YYYY-MM-DD.",
											"disabled": true
										},
										{
											"key": "filter[managerDueDate]",
											"value": "",
											"description": "Filter items by their managers’ due date, in the following URL-encoded format YYYY-MM-DD.",
											"disabled": true
										},
										{
											"key": "filter[createdAt]",
											"value": "",
											"description": "Filter items by their creation date, in the following URL-encoded format YYYY-MM-DD.",
											"disabled": true
										},
										{
											"key": "filter[sentToSubmitter]",
											"value": "",
											"description": "Filter items by their by the date they were sent to submittar, in the following URL-encoded format YYYY-MM-DD.",
											"disabled": true
										},
										{
											"key": "filter[receivedFromSubmitter]",
											"value": "",
											"description": "Filter items by their by the date they were recieved from submittar, in the following URL-encoded format YYYY-MM-DD.",
											"disabled": true
										},
										{
											"key": "filter[sentToReview]",
											"value": "2023-01-10",
											"description": "Filter items by their by the date they were sent from review, in the following URL-encoded format YYYY-MM-DD.",
											"disabled": true
										},
										{
											"key": "filter[receivedFromReview]",
											"value": "",
											"description": "Filter items by their by the date they were received from review, in the following URL-encoded format YYYY-MM-DD.",
											"disabled": true
										},
										{
											"key": "filter[publishedDate]",
											"value": "",
											"description": "Filter items by their by the date they were published, in the following URL-encoded format YYYY-MM-DD.",
											"disabled": true
										},
										{
											"key": "filter[requiredDate]",
											"value": "",
											"description": "Filter items by their by the date when the responsible contractor needs to submit the Submittal to the Submittal Manager. in the following URL-encoded format YYYY-MM-DD. ",
											"disabled": true
										},
										{
											"key": "filter[requiredApprovalDate]",
											"value": "",
											"description": "Filter items by their required approval date, in the following URL-encoded format YYYY-MM-DD.",
											"disabled": true
										},
										{
											"key": "filter[requiredOnJobDate]",
											"value": "",
											"description": "Filter items by their by the date they are required on field (job site), in the following URL-encoded format YYYY-MM-DD. ",
											"disabled": true
										},
										{
											"key": "filter[updatedAt]",
											"value": "",
											"description": "Filter items by their by the date they were updated, in the following URL-encoded format YYYY-MM-DD. ",
											"disabled": true
										},
										{
											"key": "filter[id]",
											"value": "54ca6379-2607-4fd9-9ec7-b60ae4b2b567",
											"description": "Filter items by their unique submittals id. Separate multiple values with commas",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Submittals - POST Items",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
											"    pm.expect(responseBody).to.be.an(\"object\");",
											"    pm.expect(responseBody).to.have.property(\"id\");",
											"",
											"    pm.environment.set(\"item_id\",responseBody.id);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(format = 'xxxxxxxxxx') {",
											"    var d = new Date().getTime()",
											"",
											"    var guid = format.replace(",
											"        /[xy]/g,",
											"        function (c) {",
											"        var r = (d + Math.random() * 16) % 16 | 0",
											"        d = Math.floor(d / 16)",
											"        return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16)",
											"        })",
											"",
											"    return guid",
											"}",
											"",
											"Date.prototype.addDays = function(days) {",
											"    var date = new Date(this.valueOf());",
											"    date.setDate(date.getDate() + days);",
											"    return date;",
											"}",
											"",
											"pm.variables.set(\"item_name\", \"Item-\" + guid());",
											"",
											"var submitDate = new Date();",
											"pm.variables.set(\"item_sumbmit_date\", submitDate.toISOString());",
											"pm.variables.set(\"item_due_date\", submitDate.addDays(7).toISOString().substring(0, 10));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-request-id",
										"value": "adsk-das-test"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customIdentifier\": \"{{next_custom_identifier}}\",\n    \"stateId\": \"sbc-1\",\n    \"specId\": \"{{spec_id}}\",\n    \"title\": \"{{item_name}}\",\n    \"typeId\": \"{{item_type_id}}\",\n    \"subcontractor\": \"{{user_id}}\",\n    \"subcontractorType\": \"1\",\n    \"submitterDueDate\": \"{{item_due_date}}\",\n\n    \"description\": \"Tutorial Submittal Item created by ACC Submittal API Postman Scripts\",\n    \"packageId\": \"{{package_id}}\",\n    \"watchers\": []\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items",
									"host": [
										"{{base_domain}}construction"
									],
									"path": [
										"submittals",
										"v2",
										"projects",
										":projectId",
										"items"
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Submittals - GET One Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.has.property('id');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/:itemId",
									"host": [
										"{{base_domain}}construction"
									],
									"path": [
										"submittals",
										"v2",
										"projects",
										":projectId",
										"items",
										":itemId"
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project."
										},
										{
											"key": "itemId",
											"value": "{{item_id}}",
											"description": "The ID of the submittal item. To find the item ID, call GET items."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Submittals - PATCH update item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.has.property('id');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(format = 'xxxxxxxxxx') {",
											"    var d = new Date().getTime()",
											"",
											"    var guid = format.replace(",
											"        /[xy]/g,",
											"        function (c) {",
											"        var r = (d + Math.random() * 16) % 16 | 0",
											"        d = Math.floor(d / 16)",
											"        return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16)",
											"        })",
											"",
											"    return guid",
											"}",
											"",
											"Date.prototype.addDays = function(days) {",
											"    var date = new Date(this.valueOf());",
											"    date.setDate(date.getDate() + days);",
											"    return date;",
											"}",
											"",
											"pm.variables.set(\"item_name\", \"Item-\" + guid());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"packageId\": \"{{package_id}}\",\n    \"title\": \"{{item_name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/:itemId",
									"host": [
										"{{base_domain}}construction"
									],
									"path": [
										"submittals",
										"v2",
										"projects",
										":projectId",
										"items",
										":itemId"
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project."
										},
										{
											"key": "itemId",
											"value": "{{item_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Submittals - GET item revisions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"     var responseBody = pm.response.json();",
											"    pm.expect(responseBody.results).to.be.an(\"array\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/:itemId/revisions",
									"host": [
										"{{base_domain}}construction"
									],
									"path": [
										"submittals",
										"v2",
										"projects",
										":projectId",
										"items",
										":itemId",
										"revisions"
									],
									"query": [
										{
											"key": "limit",
											"value": "20",
											"description": "The number of results to return per page in the response payload. Possible values: 1- 50. Default value: 20. For example, to limit the response to two results per page, use limit=2.",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "20",
											"description": "The page number from which you want to begin results; for example, offset=20. For more details, see the JSON API Paging documentation.",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project."
										},
										{
											"key": "itemId",
											"value": "{{item_id}}",
											"description": "The ID of the submittal item. To find the item ID, call GET items."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Submittals - POST item:transition",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"Date.prototype.addDays = function(days) {",
											"    var date = new Date(this.valueOf());",
											"    date.setDate(date.getDate() + days);",
											"    return date;",
											"}",
											"",
											"var submitDate = new Date();",
											"pm.variables.set(\"item_due_date\", submitDate.addDays(2).toISOString().substring(0, 10));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
											"    pm.expect(responseBody).to.be.an(\"object\");",
											"    pm.expect(responseBody).to.has.property('id');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stateId\": \"mgr-1\",\n    \"manager\": \"{{manager_user_id}}\",\n    \"managerType\": \"1\",\n    \"duplicateAttachments\": [\n        \"{{attachment_id}}\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/{{item_id}}:transition",
									"host": [
										"{{base_domain}}construction"
									],
									"path": [
										"submittals",
										"v2",
										"projects",
										":projectId",
										"items",
										"{{item_id}}:transition"
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Submittals - GET items:next-custom-identifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
											"    pm.expect(responseBody).to.be.an(\"object\");",
											"",
											"    pm.expect(responseBody).to.have.property(\"previousCustomIdentifier\");",
											"    pm.expect(responseBody).to.have.property(\"nextCustomIdentifier\");",
											"",
											"    pm.environment.set(\"next_custom_identifier\", responseBody.nextCustomIdentifier);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items:next-custom-identifier",
									"host": [
										"{{base_domain}}construction"
									],
									"path": [
										"submittals",
										"v2",
										"projects",
										":projectId",
										"items:next-custom-identifier"
									],
									"query": [
										{
											"key": "sepcId",
											"value": "{{spec_id}}",
											"description": "The item spec ID. This parameter is only required when the project is in spec sequence type (as opposed to global sequence).\nTo verify the sequence type, call GET metadata, and check customIdentifierSequenceType.\n\nTo get the spec ID, call GET specs, and select the relevant ID (id).",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Submittals - POST items:validate-custom-identifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customIdentifier\": \"{{next_custom_identifier}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items:validate-custom-identifier",
									"host": [
										"{{base_domain}}construction"
									],
									"path": [
										"submittals",
										"v2",
										"projects",
										":projectId",
										"items:validate-custom-identifier"
									],
									"query": [
										{
											"key": "specId",
											"value": "{{spec_id}}",
											"description": "The item spec ID. This parameter is only required when the project is in spec sequence type (as opposed to global sequence).\nTo verify the sequence type, call GET metadata, and check customIdentifierSequenceType.\n\nTo get the spec ID, call GET specs, and select the relevant ID (id).",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project."
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ItemTypes",
					"item": [
						{
							"name": "Submittals - GET ItemTypes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
											"    pm.expect(responseBody.results).to.be.an(\"array\");",
											"",
											"    if(responseBody.results.length > 0) {",
											"        pm.environment.set(\"item_type_id\", responseBody.results[0].id);",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/item-types",
									"host": [
										"{{base_domain}}construction"
									],
									"path": [
										"submittals",
										"v2",
										"projects",
										":projectId",
										"item-types"
									],
									"query": [
										{
											"key": "limit",
											"value": "20",
											"description": "The maximum number of results per page. Possible values: 1- 50. Default value: 20.",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "20",
											"description": "The number of results to skip before starting to return data.",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Submittals - GET One ItemType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.has.property('id');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/item-types/:itemTypeId",
									"host": [
										"{{base_domain}}construction"
									],
									"path": [
										"submittals",
										"v2",
										"projects",
										":projectId",
										"item-types",
										":itemTypeId"
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project."
										},
										{
											"key": "itemTypeId",
											"value": "{{item_type_id}}",
											"description": "The ID of the submittal item. To find the item ID, call GET items."
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Metadata",
					"item": [
						{
							"name": "Submittals - GET metadata",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
											"    pm.expect(responseBody).to.be.an(\"object\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/metadata",
									"host": [
										"{{base_domain}}construction"
									],
									"path": [
										"submittals",
										"v2",
										"projects",
										":projectId",
										"metadata"
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project."
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Packages",
					"item": [
						{
							"name": "Submittals - GET Packages",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
											"    pm.expect(responseBody.results).to.be.an(\"array\");",
											"",
											"    if(responseBody.results.length > 0) {",
											"        pm.environment.set(\"package_id\", responseBody.results[0].id);",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/packages",
									"host": [
										"{{base_domain}}construction"
									],
									"path": [
										"submittals",
										"v2",
										"projects",
										":projectId",
										"packages"
									],
									"query": [
										{
											"key": "limit",
											"value": "1",
											"description": "Maximal number of elements per page",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "1",
											"description": "Starting position of the query in relation to the complete set of items",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "title desc",
											"description": "Comma-delimited list of fields to sort by in the format field asc/desc - ‘id’, ‘identifier’, ‘title’, ‘description’, ‘spec’, ‘spec.identifier’",
											"disabled": true
										},
										{
											"key": "filter[identifier]",
											"value": "1",
											"description": "Comma-delimited list of fields to sort by in the format field asc/desc - ‘id’, ‘identifier’, ‘title’, ‘description’, ‘spec’, ‘spec.identifier’",
											"disabled": true
										},
										{
											"key": "filter[title]",
											"value": "Plumbing,Concrete",
											"description": "Filter packages by their title. Separate multiple values with commas",
											"disabled": true
										},
										{
											"key": "filter[specId]",
											"value": "f2e6b63a-0a83-4ced-ad84-29599e204d38",
											"description": "Filter packages by the specs IDs they are associated with. Separate multiple values with commas",
											"disabled": true
										},
										{
											"key": "filter[spec.identifier]",
											"value": "224000",
											"description": "Filter packages by the specs identifiers they are associated with. Separate multiple values with commas",
											"disabled": true
										},
										{
											"key": "search",
											"value": "2",
											"description": "Search term in identifier, title, spec.identifier",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Submittals - GET One Package",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.has.property('id');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/packages/:packageId",
									"host": [
										"{{base_domain}}construction"
									],
									"path": [
										"submittals",
										"v2",
										"projects",
										":projectId",
										"packages",
										":packageId"
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project."
										},
										{
											"key": "packageId",
											"value": "{{package_id}}",
											"description": "The ID of the submittal item to retrieve revisions for. To obtain this ID, call GET items."
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Responses",
					"item": [
						{
							"name": "Submittals - GET Responses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody.results).to.be.an(\"array\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/responses",
									"host": [
										"{{base_domain}}construction"
									],
									"path": [
										"submittals",
										"v2",
										"projects",
										":projectId",
										"responses"
									],
									"query": [
										{
											"key": "limit",
											"value": "20",
											"description": "The maximum number of results per page. Possible values: 1- 50. Default value: 20.",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "20",
											"description": "The number of results to skip before starting to return data.",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Submittals - GET One Response",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.has.property('id');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/responses/:responseId",
									"host": [
										"{{base_domain}}construction"
									],
									"path": [
										"submittals",
										"v2",
										"projects",
										":projectId",
										"responses",
										":responseId"
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project."
										},
										{
											"key": "responseId",
											"value": "{{response_id}}",
											"description": "The ID of the submittal item. To find the item ID, call GET items."
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Settings - Mappings",
					"item": [
						{
							"name": "Submittals - GET settings/mappings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    ",
											"    pm.expect(responseBody.results).to.be.an(\"array\");",
											"    pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
											"",
											"    var mgr = responseBody.results.find(r => r.userType == 1);",
											"    pm.expect(mgr).is.not.null;",
											"",
											"    pm.environment.set('manager_user_id', mgr.autodeskId);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/settings/mappings",
									"host": [
										"{{base_domain}}construction"
									],
									"path": [
										"submittals",
										"v2",
										"projects",
										":projectId",
										"settings",
										"mappings"
									],
									"query": [
										{
											"key": "limit",
											"value": "20",
											"description": "The maximum number of results per page. Possible values: 1- 50. Default value: 20.",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "20",
											"description": "The number of results to skip before starting to return data.",
											"disabled": true
										},
										{
											"key": "filter[autodeskId]",
											"value": "{{manager_user_id}}",
											"description": "omma-seperated list of Autodesk IDs for which the mappings will be returned.",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project."
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Specs",
					"item": [
						{
							"name": "Submittals - GET Specs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
											"    pm.expect(responseBody.results).to.be.an(\"array\");",
											"",
											"    if(responseBody.results.length > 0) {",
											"        pm.environment.set(\"spec_id\", responseBody.results[0].id);",
											"        pm.environment.set(\"spec_section_identifier\", responseBody.results[0].identifier);",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/specs",
									"host": [
										"{{base_domain}}construction"
									],
									"path": [
										"submittals",
										"v2",
										"projects",
										":projectId",
										"specs"
									],
									"query": [
										{
											"key": "limit",
											"value": "20",
											"description": "Maximal number of elements per page",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "20",
											"description": "Starting position of the query in relation to the complete set of items",
											"disabled": true
										},
										{
											"key": "search",
											"value": "1",
											"description": "Search term in title, identifier",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "identifier asc",
											"description": "Comma-delimited list of fields to sort by in the format field asc/desc - identifier, title",
											"disabled": true
										},
										{
											"key": "filter[identifier]",
											"value": "2",
											"description": "Filter items by their spec id. Separate multiple values with commas",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Submittals - POST Specs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
											"    pm.expect(responseBody).to.be.an(\"object\");",
											"    pm.expect(responseBody).to.have.property(\"id\");",
											"    pm.expect(responseBody).to.have.property(\"identifier\");",
											"",
											"    pm.environment.set(\"spec_id\",responseBody.id);",
											"    pm.environment.set(\"spec_section_identifier\",responseBody.identifier);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(format = 'xxxxxxxxxx') {",
											"    var d = new Date().getTime()",
											"",
											"    var guid = format.replace(",
											"        /[xy]/g,",
											"        function (c) {",
											"        var r = (d + Math.random() * 16) % 16 | 0",
											"        d = Math.floor(d / 16)",
											"        return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16)",
											"        })",
											"",
											"    return guid",
											"}",
											"",
											"Date.prototype.addDays = function(days) {",
											"    var date = new Date(this.valueOf());",
											"    date.setDate(date.getDate() + days);",
											"    return date;",
											"}",
											"",
											"pm.variables.set(\"spec_name\",  \"Materials-\"+ guid());",
											"",
											"let specSectionIdentifier = Number(pm.variables.get(\"spec_section_identifier\"));",
											"pm.variables.set(\"next_spec_section_identifier\",  specSectionIdentifier? specSectionIdentifier + 1 : 01);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"{{spec_name}}\",\n  \"identifier\": \"{{next_spec_section_identifier}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/specs",
									"host": [
										"{{base_domain}}construction"
									],
									"path": [
										"submittals",
										"v2",
										"projects",
										":projectId",
										"specs"
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Submittals - GET One Spec",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.has.property('id');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/specs/:specId",
									"host": [
										"{{base_domain}}construction"
									],
									"path": [
										"submittals",
										"v2",
										"projects",
										":projectId",
										"specs",
										":specId"
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project."
										},
										{
											"key": "specId",
											"value": "{{spec_id}}",
											"description": "The ID of the submittal item to retrieve revisions for. To obtain this ID, call GET items."
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Steps",
					"item": [
						{
							"name": "Submittals - GET item steps",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
											"    pm.expect(responseBody).to.be.an(\"object\");",
											"",
											"    if(responseBody.results.length > 0) {",
											"        pm.environment.set(\"review_step_id\", responseBody.results[0].id);",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/:itemId/steps",
									"host": [
										"{{base_domain}}construction"
									],
									"path": [
										"submittals",
										"v2",
										"projects",
										":projectId",
										"items",
										":itemId",
										"steps"
									],
									"query": [
										{
											"key": "limit",
											"value": "20",
											"description": "The number of results to return per page in the response payload. Possible values: 1- 50. Default value: 20. For example, to limit the response to two results per page, use limit=2.",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "20",
											"description": "The page number from which you want to begin results; for example, offset=20. For more details, see the JSON API Paging documentation.",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project."
										},
										{
											"key": "itemId",
											"value": "{{item_id}}",
											"description": "The ID of the submittal item. To find the item ID, call GET items."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Submittals - GET One item step",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
											"    pm.expect(responseBody).to.be.an(\"object\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/:itemId/steps/:stepId",
									"host": [
										"{{base_domain}}construction"
									],
									"path": [
										"submittals",
										"v2",
										"projects",
										":projectId",
										"items",
										":itemId",
										"steps",
										":stepId"
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project."
										},
										{
											"key": "itemId",
											"value": "{{item_id}}",
											"description": "The ID of the submittal item. To find the item ID, call GET items."
										},
										{
											"key": "stepId",
											"value": "{{review_step_id}}",
											"description": "The ID of the review step. To get the step ID for a specific submittal item, call GET steps."
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Submittals Profile",
					"item": [
						{
							"name": "Submittals - GET Users/me",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
											"    pm.expect(responseBody).to.be.an(\"object\");",
											"    pm.expect(responseBody).to.have.property(\"id\");",
											"",
											"    pm.environment.set(\"user_id\",responseBody.id);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/users/me",
									"host": [
										"{{base_domain}}construction"
									],
									"path": [
										"submittals",
										"v2",
										"projects",
										":projectId",
										"users",
										"me"
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project."
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tasks",
					"item": [
						{
							"name": "Submittals - GET tasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
											"    pm.expect(responseBody).to.be.an(\"object\");",
											"",
											"    if(responseBody.results.length > 0) {",
											"        pm.environment.set(\"review_step_task_id\", responseBody.results[0].id);",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/:itemId/steps/:stepId/tasks",
									"host": [
										"{{base_domain}}construction"
									],
									"path": [
										"submittals",
										"v2",
										"projects",
										":projectId",
										"items",
										":itemId",
										"steps",
										":stepId",
										"tasks"
									],
									"query": [
										{
											"key": "limit",
											"value": "1",
											"description": "The number of results to return per page in the response payload. Possible values: 1- 50. Default value: 20. For example, to limit the response to two results per page, use limit=2.",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "1",
											"description": "The page number from which you want to begin results; for example, offset=20. For more details, see the JSON API Paging documentation.",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project.\nUse the Data Management API to retrieve the project ID. For more information, see the Retrieve a Project ID tutorial. You need to convert the project ID into a project ID for the ACC API by removing the “b.\" prefix. For example, a project ID of b.a4be0c34a-4ab7 translates to a project ID of a4be0c34a-4ab7."
										},
										{
											"key": "itemId",
											"value": "{{item_id}}",
											"description": "The ID of the item. To find the item ID, call GET items."
										},
										{
											"key": "stepId",
											"value": "{{review_step_id}}",
											"description": "The ID of the review step. To get the step ID for a specific submittal item, call GET steps."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Submittals - GET One task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
											"    pm.expect(responseBody).to.be.an(\"object\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/:itemId/steps/:stepId/tasks/:taskId",
									"host": [
										"{{base_domain}}construction"
									],
									"path": [
										"submittals",
										"v2",
										"projects",
										":projectId",
										"items",
										":itemId",
										"steps",
										":stepId",
										"tasks",
										":taskId"
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project."
										},
										{
											"key": "itemId",
											"value": "{{item_id}}",
											"description": "The ID of the submittal item. To find the item ID, call GET items."
										},
										{
											"key": "stepId",
											"value": "{{review_step_id}}",
											"description": "The ID of the review step. To get the step ID for a specific submittal item, call GET steps."
										},
										{
											"key": "taskId",
											"value": "{{review_step_task_id}}",
											"description": "The ID of the task. To get the task ID, call GET tasks."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Submittals - POST task:close",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
											"    pm.expect(responseBody).to.be.an(\"object\");",
											"    pm.expect(responseBody).to.has.property('id');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"responseId\": \"{{response_id}}\",\n    \"responseComment\": \"DAS Test: this is the response comment\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/:itemId/steps/:stepId/tasks/{{review_step_task_id}}:close",
									"host": [
										"{{base_domain}}construction"
									],
									"path": [
										"submittals",
										"v2",
										"projects",
										":projectId",
										"items",
										":itemId",
										"steps",
										":stepId",
										"tasks",
										"{{review_step_task_id}}:close"
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project."
										},
										{
											"key": "itemId",
											"value": "{{item_id}}",
											"description": "The ID of the submittal item. To find the item ID, call GET items."
										},
										{
											"key": "stepId",
											"value": "{{review_step_id}}",
											"description": "The ID of the review step. To get the step ID for a specific submittal item, call GET steps."
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Templates",
					"item": [
						{
							"name": "Submittals - GET templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.be.an(\"object\");",
											"",
											"    pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
											"",
											"    if(responseBody.results.length > 0) {",
											"        pm.environment.set(\"review_template_id\", responseBody.results[0].id);",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/templates",
									"host": [
										"{{base_domain}}construction"
									],
									"path": [
										"submittals",
										"v2",
										"projects",
										":projectId",
										"templates"
									],
									"query": [
										{
											"key": "limit",
											"value": "1",
											"description": "The number of results to return per page in the response payload. Possible values: 1- 50. Default value: 20. For example, to limit the response to two results per page, use limit=2.",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "1",
											"description": "The page number from which you want to begin results; for example, offset=20. For more details, see the JSON API Paging documentation.",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "createdAt desc",
											"description": "Comma-delimited list of fields to sort by in the format field asc/desc - id, name, createdAt, createdBy, updatedAt, updatedBy",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project."
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Tutorials",
			"item": [
				{
					"name": "Download Submittal Attachments",
					"item": [
						{
							"name": "Step 0: Run Firstly-Get Project ID",
							"item": [
								{
									"name": "GET one ACC account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// find the specified project and setup the environment variable \"hub_id\"",
													"const hub_name = pm.variables.get(\"hub_name\");",
													"pm.test(\"find matches account by name: \" + hub_name, function () {",
													"    const body = JSON.parse(responseBody);",
													"    const found = body.data.find(d => d.attributes.name == hub_name);",
													"",
													"    pm.expect(found).to.not.be.undefined;",
													"    ",
													"    pm.environment.set(\"hub_id\", found.id);",
													"    pm.environment.set(\"account_id\", found.id.split(\"b.\").join(\"\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"hub_name\", \"change to your hub/account name\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_domain}}/project/v1/hubs?filter[extension.type]=hubs:autodesk.bim360:Account",
											"host": [
												"{{base_domain}}"
											],
											"path": [
												"project",
												"v1",
												"hubs"
											],
											"query": [
												{
													"key": "filter[extension.type]",
													"value": "hubs:autodesk.bim360:Account"
												}
											]
										},
										"description": "Returns a collection of accessible hubs for this member.<br/>\nhttps://forge.autodesk.com/en/docs/data/v2/reference/http/hubs-GET/"
									},
									"response": []
								},
								{
									"name": "GET one ACC project",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"project_name\", \"change to your project name\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// find the specified project and setup the environment variable \"project_id\"",
													"const project_name = pm.variables.get(\"project_name\") ",
													"pm.test(\"find matches project by name: \" + project_name, function () {",
													"    const body = JSON.parse(responseBody);",
													"    const found = body.data.find(d => d.attributes.name == project_name)",
													"",
													"    pm.expect(found).to.not.be.undefined;",
													"    ",
													"    postman.setEnvironmentVariable(\"project_id\", found.id);",
													"    postman.setEnvironmentVariable(\"project_id_without_b\", found.id.split(\"b.\").join(\"\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_domain}}project/v1/hubs/{{hub_id}}/projects",
											"host": [
												"{{base_domain}}project"
											],
											"path": [
												"v1",
												"hubs",
												"{{hub_id}}",
												"projects"
											]
										},
										"description": "Returns a collection of projects for a given hub_id. A project represents a BIM 360 Team project, a Fusion Team project, a BIM 360 Docs project, or an A360 Personal project. Multiple projects can be created within a single hub.<br/>\nhttps://forge.autodesk.com/en/docs/data/v2/reference/http/hubs-hub_id-projects-GET/"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Step 1: Find the Submittal Item ID",
							"item": [
								{
									"name": "Step 1: GET items",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
													"    pm.expect(responseBody.results).to.be.an(\"array\");",
													"",
													"    if(responseBody.results.length > 0) {",
													"        pm.environment.set(\"item_id\", responseBody.results[0].id);",
													"    }",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"items"
											],
											"query": [
												{
													"key": "limit",
													"value": "2",
													"description": "Maximal number of elements per page",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "2",
													"description": "Starting position of the query in relation to the complete set of items",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "createdAt desc",
													"description": "Comma-delimited list of fields to sort by in the format field asc/desc - ballInCourtUsers, ballInCourtCompanies, ballInCourtRoles, ballInCourtType, createdAt, createdBy, description, dueDate, id, identifier, leadTime, manager, managerType, managerDueDate, package.identifier, package.spec.identifier, packageId, packageIdentifier, packageSpecIdentifier, packageTitle, priority, publishedBy, publishedDate, receivedFromReview, receivedFromSubmitter, requiredApprovalDate, requiredDate, requiredOnJobDate, respondedAt, respondedBy, response.value, responseComment, responseId, revision, sentToReview, sentToReviewBy, sentToSubmitter, spec.identifier, specId, specIdentifier, specTitle, stateId, statusId, subcontractor, subcontractorType, submittedBy, submitterDueDate, subsection, title, type.value, typeId, updatedAt, updatedBy, watchers",
													"disabled": true
												},
												{
													"key": "search",
													"value": "Test3",
													"description": "Search term in identifier, title, spec identifier, ball in court fields",
													"disabled": true
												},
												{
													"key": "filter[title]",
													"value": "Test3,Water Closet",
													"description": "Filter items by their title. Separate multiple values with commas",
													"disabled": true
												},
												{
													"key": "filter[statusId]",
													"value": "1",
													"description": "Filter items by their status id. Separate multiple values with commas",
													"disabled": true
												},
												{
													"key": "filter[specId]",
													"value": "{{spec_id}}",
													"description": "Filter items by their spec id. Separate multiple values with commas",
													"disabled": true
												},
												{
													"key": "filter[ballInCourtUsers]",
													"value": "T5PKRC57TLQ8",
													"description": "Filter items by their ball-in-court user id. Separate multiple values with commas",
													"disabled": true
												},
												{
													"key": "filter[ballInCourtCompanies]",
													"value": "237390714",
													"description": "Filter items by their ball-in-court company id. Separate multiple values with commas",
													"disabled": true
												},
												{
													"key": "filter[ballInCourtRoles]",
													"value": "237390721",
													"description": "Filter items by their ball-in-court role id. Separate multiple values with commas",
													"disabled": true
												},
												{
													"key": "filter[responseId]",
													"value": "{{response_id}}",
													"description": "Filter items by their response id. Separate multiple values with commas.",
													"disabled": true
												},
												{
													"key": "filter[typeId]",
													"value": "{{item_type_id}}",
													"description": "Filter items by their type id. Separate multiple values with commas.",
													"disabled": true
												},
												{
													"key": "filter[stateId]",
													"value": "sbc-2",
													"description": "Filter items by their state id. Separate multiple values with commas.",
													"disabled": true
												},
												{
													"key": "filter[identifier]",
													"value": "8",
													"description": "Filter items by their unique item identifier. Separate multiple values with commas",
													"disabled": true
												},
												{
													"key": "filter[leadTime]",
													"value": "5",
													"description": "Filter items by their lead time.",
													"disabled": true
												},
												{
													"key": "filter[revision]",
													"value": "0",
													"description": "Filter items by their revision. Separate multiple values with commas",
													"disabled": true
												},
												{
													"key": "filter[manager]",
													"value": "W8ZDPLUTSJKZ",
													"description": "Filter items by the Autodesk ID of the manager.",
													"disabled": true
												},
												{
													"key": "filter[managerType]",
													"value": "1",
													"description": "Filter items by the manager type.",
													"disabled": true
												},
												{
													"key": "filter[subcontractor]",
													"value": "T5PKRC57TLQ8",
													"description": "Filter items by the Autodesk ID of the subcontractor.",
													"disabled": true
												},
												{
													"key": "filter[subcontractorType]",
													"value": "2",
													"description": "Filter items by the subcontractor type.",
													"disabled": true
												},
												{
													"key": "filter[createdBy]",
													"value": "W8ZDPLUTSJKZ",
													"description": "Filter items by the Autodesk ID of the user that created the item.",
													"disabled": true
												},
												{
													"key": "filter[watchers]",
													"value": "W8ZDPLUTSJKZ",
													"description": "Filter items by the Autodesk ID of the watchers. Separate multiple values with commas.",
													"disabled": true
												},
												{
													"key": "filter[dueDate]",
													"value": "2023-09-13",
													"description": "Filter items by their due date, in the following URL-encoded format YYYY-MM-DD.",
													"disabled": true
												},
												{
													"key": "filter[submitterDueDate]",
													"value": "",
													"description": "Filter items by their submitter’s due date, in the following URL-encoded format YYYY-MM-DD.",
													"disabled": true
												},
												{
													"key": "filter[managerDueDate]",
													"value": "",
													"description": "Filter items by their managers’ due date, in the following URL-encoded format YYYY-MM-DD.",
													"disabled": true
												},
												{
													"key": "filter[createdAt]",
													"value": "",
													"description": "Filter items by their creation date, in the following URL-encoded format YYYY-MM-DD.",
													"disabled": true
												},
												{
													"key": "filter[sentToSubmitter]",
													"value": "",
													"description": "Filter items by their by the date they were sent to submittar, in the following URL-encoded format YYYY-MM-DD.",
													"disabled": true
												},
												{
													"key": "filter[receivedFromSubmitter]",
													"value": "",
													"description": "Filter items by their by the date they were recieved from submittar, in the following URL-encoded format YYYY-MM-DD.",
													"disabled": true
												},
												{
													"key": "filter[sentToReview]",
													"value": "",
													"description": "Filter items by their by the date they were sent from review, in the following URL-encoded format YYYY-MM-DD.",
													"disabled": true
												},
												{
													"key": "filter[receivedFromReview]",
													"value": "",
													"description": "Filter items by their by the date they were received from review, in the following URL-encoded format YYYY-MM-DD.",
													"disabled": true
												},
												{
													"key": "filter[publishedDate]",
													"value": "",
													"description": "Filter items by their by the date they were published, in the following URL-encoded format YYYY-MM-DD.",
													"disabled": true
												},
												{
													"key": "filter[requiredDate]",
													"value": "",
													"description": "Filter items by their by the date when the responsible contractor needs to submit the Submittal to the Submittal Manager. in the following URL-encoded format YYYY-MM-DD. ",
													"disabled": true
												},
												{
													"key": "filter[requiredApprovalDate]",
													"value": "",
													"description": "Filter items by their required approval date, in the following URL-encoded format YYYY-MM-DD.",
													"disabled": true
												},
												{
													"key": "filter[requiredOnJobDate]",
													"value": "",
													"description": "Filter items by their by the date they are required on field (job site), in the following URL-encoded format YYYY-MM-DD. ",
													"disabled": true
												},
												{
													"key": "filter[updatedAt]",
													"value": "",
													"description": "Filter items by their by the date they were updated, in the following URL-encoded format YYYY-MM-DD. ",
													"disabled": true
												},
												{
													"key": "filter[id]",
													"value": "54ca6379-2607-4fd9-9ec7-b60ae4b2b567",
													"description": "Filter items by their unique submittals id. Separate multiple values with commas",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Step 2: Find the Storage Object ID for the Attachment",
							"item": [
								{
									"name": "Step 2: GET attachments",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
													"    pm.expect(responseBody.results).to.be.an(\"array\");",
													"",
													"    if(responseBody.results.length > 0) {",
													"        pm.environment.set(\"attachment_id\", responseBody.results[0].id);",
													"        pm.environment.set(\"attachment_storage_urn\", responseBody.results[0].uploadUrn);",
													"    }",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/:itemId/attachments",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"items",
												":itemId",
												"attachments"
											],
											"query": [
												{
													"key": "limit",
													"value": "1",
													"description": "Maximal number of elements per page",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "1",
													"description": "Starting position of the query in relation to the complete set of items",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "categoryId desc",
													"description": "Comma-delimited list of fields to sort by in the format field asc/desc - id, isFileUploaded, asyncState, createdBy, createdAt, updatedBy, updatedAt, name, uploadUrn, urn, urnPage, resourceUrns, urnTypeId, urnVersion, revision, categoryId, isReview, isResponse",
													"disabled": true
												},
												{
													"key": "filter[categoryId]",
													"value": "5",
													"description": "Filter attachments by their category identifier. Separate multiple values with commas",
													"disabled": true
												},
												{
													"key": "filter[revision]",
													"value": "1",
													"description": "Filter attachments by their revision. Separate multiple values with commas",
													"disabled": true
												},
												{
													"key": "filter[isFileUploaded]",
													"value": "true",
													"description": "Filter attachments by whether they completed the upload process.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												},
												{
													"key": "itemId",
													"value": "{{item_id}}",
													"description": "The ID of the submittal item. To find the item ID, call GET items."
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Step 3: Generate a Signed S3 URL",
							"item": [
								{
									"name": "Step 3: Generate a Signed S3 URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"    pm.expect(responseBody).to.has.property('url');",
													"",
													"    pm.environment.set(\"attachment_download_url\", responseBody.url);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var objectUrn = pm.environment.get(\"attachment_storage_urn\");",
													"",
													"var result = objectUrn.replace('urn:adsk.objects:os.object:', '').split('/');",
													"",
													"pm.variables.set(\"attachment_storage_bucket_key\", result[0]);",
													"pm.variables.set(\"attachment_storage_object_key\", result[1]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_domain}}oss/v2/buckets/:bucketKey/objects/:objectKey/signeds3download",
											"host": [
												"{{base_domain}}oss"
											],
											"path": [
												"v2",
												"buckets",
												":bucketKey",
												"objects",
												":objectKey",
												"signeds3download"
											],
											"variable": [
												{
													"key": "bucketKey",
													"value": "{{attachment_storage_bucket_key}}"
												},
												{
													"key": "objectKey",
													"value": "{{attachment_storage_object_key}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Step 4: Download the File",
							"item": [
								{
									"name": "Step 4: Download the File",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{attachment_download_url}}",
											"host": [
												"{{attachment_download_url}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Attach Files From the ACC Files Tool to Submittals",
					"item": [
						{
							"name": "Step 0: Run Firstly-Get Project ID",
							"item": [
								{
									"name": "GET one ACC account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// find the specified project and setup the environment variable \"hub_id\"",
													"const hub_name = pm.variables.get(\"hub_name\");",
													"pm.test(\"find matches account by name: \" + hub_name, function () {",
													"    const body = JSON.parse(responseBody);",
													"    const found = body.data.find(d => d.attributes.name == hub_name);",
													"",
													"    pm.expect(found).to.not.be.undefined;",
													"    ",
													"    pm.environment.set(\"hub_id\", found.id);",
													"    pm.environment.set(\"account_id\", found.id.split(\"b.\").join(\"\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"hub_name\", \"change to your hub/account name\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_domain}}/project/v1/hubs?filter[extension.type]=hubs:autodesk.bim360:Account",
											"host": [
												"{{base_domain}}"
											],
											"path": [
												"project",
												"v1",
												"hubs"
											],
											"query": [
												{
													"key": "filter[extension.type]",
													"value": "hubs:autodesk.bim360:Account"
												}
											]
										},
										"description": "Returns a collection of accessible hubs for this member.<br/>\nhttps://forge.autodesk.com/en/docs/data/v2/reference/http/hubs-GET/"
									},
									"response": []
								},
								{
									"name": "GET one ACC project",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"project_name\", \"change to your project name\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// find the specified project and setup the environment variable \"project_id\"",
													"const project_name = pm.variables.get(\"project_name\") ",
													"pm.test(\"find matches project by name: \" + project_name, function () {",
													"    const body = JSON.parse(responseBody);",
													"    const found = body.data.find(d => d.attributes.name == project_name)",
													"",
													"    pm.expect(found).to.not.be.undefined;",
													"    ",
													"    postman.setEnvironmentVariable(\"project_id\", found.id);",
													"    postman.setEnvironmentVariable(\"project_id_without_b\", found.id.split(\"b.\").join(\"\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_domain}}project/v1/hubs/{{hub_id}}/projects",
											"host": [
												"{{base_domain}}project"
											],
											"path": [
												"v1",
												"hubs",
												"{{hub_id}}",
												"projects"
											]
										},
										"description": "Returns a collection of projects for a given hub_id. A project represents a BIM 360 Team project, a Fusion Team project, a BIM 360 Docs project, or an A360 Personal project. Multiple projects can be created within a single hub.<br/>\nhttps://forge.autodesk.com/en/docs/data/v2/reference/http/hubs-hub_id-projects-GET/"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Step 1: Verify Permissions and Fields",
							"item": [
								{
									"name": "Step 1: GET one item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"    pm.expect(responseBody).to.has.property('id');",
													"    pm.expect(responseBody).to.has.property('permittedActions'); ",
													"});",
													"",
													"pm.test(\"Response body has the right to create attachments\", () => {",
													"    var responseBody = pm.response.json();",
													"    var permittedAction = responseBody.permittedActions.find(d => d.id == \"Attachment::create\");",
													"    pm.expect(permittedAction).to.not.be.null;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/:itemId",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"items",
												":itemId"
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												},
												{
													"key": "itemId",
													"value": "{{item_id}}",
													"description": "The ID of the submittal item. To find the item ID, call GET items."
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Step 2: Find the Folder ID",
							"item": [
								{
									"name": "Step 2: GET ACC project topFolders",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"folder_name\", \"Project Files\");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// find the specified project and setup the environment variable \"project_id\"",
													"const folder_name = pm.variables.get(\"folder_name\") ",
													"pm.test(\"find matches project by name: \" + folder_name, function () {",
													"    const body = pm.response.json();",
													"    const found = body.data.find(d => d.attributes.name == folder_name)",
													"",
													"    pm.expect(found).to.not.be.undefined;",
													"    ",
													"    pm.environment.set(\"folder_id\", found.id);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_domain}}project/v1/hubs/:hubId/projects/:projectId/topFolders",
											"host": [
												"{{base_domain}}project"
											],
											"path": [
												"v1",
												"hubs",
												":hubId",
												"projects",
												":projectId",
												"topFolders"
											],
											"variable": [
												{
													"key": "hubId",
													"value": "{{hub_id}}"
												},
												{
													"key": "projectId",
													"value": "{{project_id}}"
												}
											]
										},
										"description": "Returns a collection of projects for a given hub_id. A project represents a BIM 360 Team project, a Fusion Team project, a BIM 360 Docs project, or an A360 Personal project. Multiple projects can be created within a single hub.<br/>\nhttps://forge.autodesk.com/en/docs/data/v2/reference/http/hubs-hub_id-projects-GET/"
									},
									"response": []
								}
							]
						},
						{
							"name": "Step 3: Find the Version ID for the File",
							"item": [
								{
									"name": "Step 3: GET one file in ACC project folder",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"folder_name\", \"Project Files\");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"find one file in matches folder\", function () {",
													"    const body = pm.response.json();",
													"    const found = body.included.find(d => d.type == \"versions\");",
													"",
													"    pm.expect(found).to.not.be.undefined;",
													"    ",
													"    pm.environment.set(\"attachment_urn\", found.id);",
													"    pm.environment.set(\"attachment_name\", found.attributes.name);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_domain}}/data/v1/projects/:project_id/folders/:folder_id/contents",
											"host": [
												"{{base_domain}}"
											],
											"path": [
												"data",
												"v1",
												"projects",
												":project_id",
												"folders",
												":folder_id",
												"contents"
											],
											"variable": [
												{
													"key": "project_id",
													"value": "{{project_id}}"
												},
												{
													"key": "folder_id",
													"value": "{{folder_id}}"
												}
											]
										},
										"description": "Returns a collection of projects for a given hub_id. A project represents a BIM 360 Team project, a Fusion Team project, a BIM 360 Docs project, or an A360 Personal project. Multiple projects can be created within a single hub.<br/>\nhttps://forge.autodesk.com/en/docs/data/v2/reference/http/hubs-hub_id-projects-GET/"
									},
									"response": []
								}
							]
						},
						{
							"name": "Step 4: Attach the File to the Submittal Item",
							"item": [
								{
									"name": "Step 4.1: POST create attachment from DM file without categoryId (Common)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"    pm.expect(responseBody).to.has.property('id');",
													"",
													"    pm.environment.set(\"attachment_id\", responseBody.id);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{attachment_name}}\",\n    \"urnTypeId\": \"2\",\n    \"urn\": \"{{attachment_urn}}\",\n    \"isFileUploaded\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/:itemId/attachments",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"items",
												":itemId",
												"attachments"
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												},
												{
													"key": "itemId",
													"value": "{{item_id}}",
													"description": "The ID of the submittal item. To find the item ID, call GET items."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(optional) Step 4.2: POST create attachment from DM file for Prepare for Review (mgr-1) state for subcontractor",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"    pm.expect(responseBody).to.has.property('id');",
													"",
													"    pm.environment.set(\"attachment_id\", responseBody.id);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{attachment_name}}\",\n    \"urnTypeId\": \"2\",\n    \"urn\": \"{{attachment_urn}}\",\n    \"isFileUploaded\": true,\n    \"categoryId\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/:itemId/attachments",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"items",
												":itemId",
												"attachments"
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												},
												{
													"key": "itemId",
													"value": "{{item_id}}",
													"description": "The ID of the submittal item. To find the item ID, call GET items."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(optional) Step 4.3: POST create attachment from DM file for Prepare for Close and Distribute (mgr-2) state",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"    pm.expect(responseBody).to.has.property('id');",
													"",
													"    pm.environment.set(\"attachment_id\", responseBody.id);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{attachment_name}}\",\n    \"urnTypeId\": \"2\",\n    \"urn\": \"{{attachment_urn}}\",\n    \"isFileUploaded\": true,\n    \"categoryId\": 4\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/:itemId/attachments",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"items",
												":itemId",
												"attachments"
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												},
												{
													"key": "itemId",
													"value": "{{item_id}}",
													"description": "The ID of the submittal item. To find the item ID, call GET items."
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Attach Local Files to Submittals",
					"item": [
						{
							"name": "Step 0: Run Firstly-Get Project ID",
							"item": [
								{
									"name": "GET one ACC account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// find the specified project and setup the environment variable \"hub_id\"",
													"const hub_name = pm.variables.get(\"hub_name\");",
													"pm.test(\"find matches account by name: \" + hub_name, function () {",
													"    const body = JSON.parse(responseBody);",
													"    const found = body.data.find(d => d.attributes.name == hub_name);",
													"",
													"    pm.expect(found).to.not.be.undefined;",
													"    ",
													"    pm.environment.set(\"hub_id\", found.id);",
													"    pm.environment.set(\"account_id\", found.id.split(\"b.\").join(\"\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"hub_name\", \"change to your hub/account name\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_domain}}/project/v1/hubs?filter[extension.type]=hubs:autodesk.bim360:Account",
											"host": [
												"{{base_domain}}"
											],
											"path": [
												"project",
												"v1",
												"hubs"
											],
											"query": [
												{
													"key": "filter[extension.type]",
													"value": "hubs:autodesk.bim360:Account"
												}
											]
										},
										"description": "Returns a collection of accessible hubs for this member.<br/>\nhttps://forge.autodesk.com/en/docs/data/v2/reference/http/hubs-GET/"
									},
									"response": []
								},
								{
									"name": "GET one ACC project",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"project_name\", \"change to your project name\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// find the specified project and setup the environment variable \"project_id\"",
													"const project_name = pm.variables.get(\"project_name\") ",
													"pm.test(\"find matches project by name: \" + project_name, function () {",
													"    const body = JSON.parse(responseBody);",
													"    const found = body.data.find(d => d.attributes.name == project_name)",
													"",
													"    pm.expect(found).to.not.be.undefined;",
													"    ",
													"    postman.setEnvironmentVariable(\"project_id\", found.id);",
													"    postman.setEnvironmentVariable(\"project_id_without_b\", found.id.split(\"b.\").join(\"\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_domain}}project/v1/hubs/{{hub_id}}/projects",
											"host": [
												"{{base_domain}}project"
											],
											"path": [
												"v1",
												"hubs",
												"{{hub_id}}",
												"projects"
											]
										},
										"description": "Returns a collection of projects for a given hub_id. A project represents a BIM 360 Team project, a Fusion Team project, a BIM 360 Docs project, or an A360 Personal project. Multiple projects can be created within a single hub.<br/>\nhttps://forge.autodesk.com/en/docs/data/v2/reference/http/hubs-hub_id-projects-GET/"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Step 1: Verify Permissions and Fields",
							"item": [
								{
									"name": "Step 1: GET one item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"    pm.expect(responseBody).to.has.property('id');",
													"    pm.expect(responseBody).to.has.property('permittedActions'); ",
													"});",
													"",
													"pm.test(\"Response body has the right to create attachments\", () => {",
													"    var responseBody = pm.response.json();",
													"    var permittedAction = responseBody.permittedActions.find(d => d.id == \"Attachment::create\");",
													"    pm.expect(permittedAction).to.not.be.null;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/:itemId",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"items",
												":itemId"
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												},
												{
													"key": "itemId",
													"value": "{{item_id}}",
													"description": "The ID of the submittal item. To find the item ID, call GET items."
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Step 2: Create an Attachment Object",
							"item": [
								{
									"name": "Step 2.1: POST create attachment from local file without categoryId (Common)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"    pm.expect(responseBody).to.has.property('id');",
													"    pm.expect(responseBody).to.has.property('uploadUrn');",
													"",
													"    var urnParts = responseBody.uploadUrn.replace('urn:adsk.objects:os.object:', '').split('/');",
													"    pm.expect(urnParts).to.has.length(2);",
													"",
													"    pm.environment.set(\"attachment_id\", responseBody.id);",
													"    pm.environment.set(\"attachment_buckey_key\", urnParts[0]);",
													"    pm.environment.set(\"attachment_object_key\", urnParts[1]);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function guid(format = 'xxxxxxxxxx') {",
													"    var d = new Date().getTime()",
													"",
													"    var guid = format.replace(",
													"        /[xy]/g,",
													"        function (c) {",
													"        var r = (d + Math.random() * 16) % 16 | 0",
													"        d = Math.floor(d / 16)",
													"        return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16)",
													"        })",
													"",
													"    return guid",
													"}",
													"",
													"Date.prototype.addDays = function(days) {",
													"    var date = new Date(this.valueOf());",
													"    date.setDate(date.getDate() + days);",
													"    return date;",
													"}",
													"",
													"pm.variables.set(\"attachment_name\", \"Attachment-\" + guid() + \".rvt\");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{attachment_name}}\",\n    \"urnTypeId\": \"2\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/:itemId/attachments",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"items",
												":itemId",
												"attachments"
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												},
												{
													"key": "itemId",
													"value": "{{item_id}}",
													"description": "The ID of the submittal item. To find the item ID, call GET items."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(optional) Step 2.2: POST create attachment from local file for Prepare for Review (mgr-1) state for subcontractor",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"    pm.expect(responseBody).to.has.property('id');",
													"    pm.expect(responseBody).to.has.property('uploadUrn');",
													"",
													"    var urnParts = responseBody.uploadUrn.replace('urn:adsk.objects:os.object:', '').split('/');",
													"    pm.expect(urnParts).to.has.length(2);",
													"",
													"    pm.environment.set(\"attachment_id\", responseBody.id);",
													"    pm.environment.set(\"attachment_buckey_key\", urnParts[0]);",
													"    pm.environment.set(\"attachment_object_key\", urnParts[1]);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function guid(format = 'xxxxxxxxxx') {",
													"    var d = new Date().getTime()",
													"",
													"    var guid = format.replace(",
													"        /[xy]/g,",
													"        function (c) {",
													"        var r = (d + Math.random() * 16) % 16 | 0",
													"        d = Math.floor(d / 16)",
													"        return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16)",
													"        })",
													"",
													"    return guid",
													"}",
													"",
													"Date.prototype.addDays = function(days) {",
													"    var date = new Date(this.valueOf());",
													"    date.setDate(date.getDate() + days);",
													"    return date;",
													"}",
													"",
													"pm.variables.set(\"attachment_name\", \"Attachment-\" + guid() + \".rvt\");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{attachment_name}}\",\n    \"urnTypeId\": \"2\",\n    \"categoryId\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/:itemId/attachments",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"items",
												":itemId",
												"attachments"
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												},
												{
													"key": "itemId",
													"value": "{{item_id}}",
													"description": "The ID of the submittal item. To find the item ID, call GET items."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(optional) Step 2.3: POST create attachment from local file  for Prepare for Close and Distribute (mgr-2) state",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"    pm.expect(responseBody).to.has.property('id');",
													"    pm.expect(responseBody).to.has.property('uploadUrn');",
													"",
													"    var urnParts = responseBody.uploadUrn.replace('urn:adsk.objects:os.object:', '').split('/');",
													"    pm.expect(urnParts).to.has.length(2);",
													"",
													"    pm.environment.set(\"attachment_id\", responseBody.id);",
													"    pm.environment.set(\"attachment_buckey_key\", urnParts[0]);",
													"    pm.environment.set(\"attachment_object_key\", urnParts[1]);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function guid(format = 'xxxxxxxxxx') {",
													"    var d = new Date().getTime()",
													"",
													"    var guid = format.replace(",
													"        /[xy]/g,",
													"        function (c) {",
													"        var r = (d + Math.random() * 16) % 16 | 0",
													"        d = Math.floor(d / 16)",
													"        return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16)",
													"        })",
													"",
													"    return guid",
													"}",
													"",
													"Date.prototype.addDays = function(days) {",
													"    var date = new Date(this.valueOf());",
													"    date.setDate(date.getDate() + days);",
													"    return date;",
													"}",
													"",
													"pm.variables.set(\"attachment_name\", \"Attachment-\" + guid() + \".rvt\");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{attachment_name}}\",\n    \"urnTypeId\": \"2\",\n    \"categoryId\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/:itemId/attachments",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"items",
												":itemId",
												"attachments"
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												},
												{
													"key": "itemId",
													"value": "{{item_id}}",
													"description": "The ID of the submittal item. To find the item ID, call GET items."
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Step 3: Generate a Signed S3 URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.be.an(\"object\");",
											"    pm.expect(responseBody).to.has.property('uploadKey');",
											"    pm.expect(responseBody).to.has.property('urls');",
											"    pm.expect(responseBody.urls).to.has.length.and.is.not.eqls(0);",
											"",
											"    pm.environment.set(\"attachment_upload_key\", responseBody.uploadKey);",
											"    pm.environment.set(\"attachment_upload_url\", responseBody.urls[0]);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_domain}}oss/v2/buckets/:bucketKey/objects/:objectKey/signeds3upload",
									"host": [
										"{{base_domain}}oss"
									],
									"path": [
										"v2",
										"buckets",
										":bucketKey",
										"objects",
										":objectKey",
										"signeds3upload"
									],
									"variable": [
										{
											"key": "bucketKey",
											"value": "{{attachment_buckey_key}}"
										},
										{
											"key": "objectKey",
											"value": "{{attachment_object_key}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 4: Upload a File to the Signed URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "/Users/kangea/Library/CloudStorage/OneDrive-Autodesk/DAS/Customer Support/Models/rac_advanced_sample_project.rvt"
									}
								},
								"url": {
									"raw": "{{attachment_upload_url}}",
									"host": [
										"{{attachment_upload_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 6: Finalize the Attachment Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.be.an(\"object\");",
											"    pm.expect(responseBody).to.has.property('bucketKey');",
											"    pm.expect(responseBody).to.has.property('objectId');",
											"",
											"    pm.expect(responseBody.bucketKey).to.be.a('string');",
											"    pm.expect(responseBody.objectId).to.be.a('string');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"uploadKey\": \"{{attachment_upload_key}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_domain}}oss/v2/buckets/:bucketKey/objects/:objectKey/signeds3upload",
									"host": [
										"{{base_domain}}oss"
									],
									"path": [
										"v2",
										"buckets",
										":bucketKey",
										"objects",
										":objectKey",
										"signeds3upload"
									],
									"variable": [
										{
											"key": "bucketKey",
											"value": "{{attachment_buckey_key}}"
										},
										{
											"key": "objectKey",
											"value": "{{attachment_object_key}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 6: Finalize the Attachment Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.has.property('id');",
											"",
											"    pm.expect(responseBody).to.has.property('isFileUploaded').and.to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isFileUploaded\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/:itemId/attachments/:attachmentId",
									"host": [
										"{{base_domain}}construction"
									],
									"path": [
										"submittals",
										"v2",
										"projects",
										":projectId",
										"items",
										":itemId",
										"attachments",
										":attachmentId"
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project."
										},
										{
											"key": "itemId",
											"value": "{{item_id}}",
											"description": "The ID of the submittal item. To find the item ID, call GET items."
										},
										{
											"key": "attachmentId",
											"value": "{{attachment_id}}",
											"description": "The ID of the attachment. To find the ID, call GET attachments."
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create a Submittal Item",
					"item": [
						{
							"name": "Step 0: Run Firstly-Get Project ID",
							"item": [
								{
									"name": "GET one ACC account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// find the specified project and setup the environment variable \"hub_id\"",
													"const hub_name = pm.variables.get(\"hub_name\");",
													"pm.test(\"find matches account by name: \" + hub_name, function () {",
													"    const body = JSON.parse(responseBody);",
													"    const found = body.data.find(d => d.attributes.name == hub_name);",
													"",
													"    pm.expect(found).to.not.be.undefined;",
													"    ",
													"    pm.environment.set(\"hub_id\", found.id);",
													"    pm.environment.set(\"account_id\", found.id.split(\"b.\").join(\"\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"hub_name\", \"change to your hub/account name\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_domain}}/project/v1/hubs?filter[extension.type]=hubs:autodesk.bim360:Account",
											"host": [
												"{{base_domain}}"
											],
											"path": [
												"project",
												"v1",
												"hubs"
											],
											"query": [
												{
													"key": "filter[extension.type]",
													"value": "hubs:autodesk.bim360:Account"
												}
											]
										},
										"description": "Returns a collection of accessible hubs for this member.<br/>\nhttps://forge.autodesk.com/en/docs/data/v2/reference/http/hubs-GET/"
									},
									"response": []
								},
								{
									"name": "GET one ACC project",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"project_name\", \"change to your project name\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// find the specified project and setup the environment variable \"project_id\"",
													"const project_name = pm.variables.get(\"project_name\") ",
													"pm.test(\"find matches project by name: \" + project_name, function () {",
													"    const body = JSON.parse(responseBody);",
													"    const found = body.data.find(d => d.attributes.name == project_name)",
													"",
													"    pm.expect(found).to.not.be.undefined;",
													"    ",
													"    postman.setEnvironmentVariable(\"project_id\", found.id);",
													"    postman.setEnvironmentVariable(\"project_id_without_b\", found.id.split(\"b.\").join(\"\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_domain}}project/v1/hubs/{{hub_id}}/projects",
											"host": [
												"{{base_domain}}project"
											],
											"path": [
												"v1",
												"hubs",
												"{{hub_id}}",
												"projects"
											]
										},
										"description": "Returns a collection of projects for a given hub_id. A project represents a BIM 360 Team project, a Fusion Team project, a BIM 360 Docs project, or an A360 Personal project. Multiple projects can be created within a single hub.<br/>\nhttps://forge.autodesk.com/en/docs/data/v2/reference/http/hubs-hub_id-projects-GET/"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Step 1: Verify User Permissions",
							"item": [
								{
									"name": "Step 1: GET users/me",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
													"    pm.expect(responseBody).to.be.an(\"object\");",
													"    pm.expect(responseBody).to.have.property(\"id\");",
													"",
													"    pm.environment.set(\"user_id\",responseBody.id);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/users/me",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"users",
												"me"
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Step 2: Find or Create the Spec Section ID",
							"item": [
								{
									"name": "Step 2.1: Find the Spec Section ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
													"    pm.expect(responseBody.results).to.be.an(\"array\");",
													"",
													"    if(responseBody.results.length > 0) {",
													"        pm.environment.set(\"spec_id\", responseBody.results[0].id);",
													"        pm.environment.set(\"spec_section_identifier\", responseBody.results[0].identifier);",
													"    }",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/specs?sort=identifier desc",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"specs"
											],
											"query": [
												{
													"key": "limit",
													"value": "1",
													"description": "Maximal number of elements per page",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "1",
													"description": "Starting position of the query in relation to the complete set of items",
													"disabled": true
												},
												{
													"key": "search",
													"value": "2",
													"description": "Search term in title, identifier",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "identifier desc",
													"description": "Comma-delimited list of fields to sort by in the format field asc/desc - identifier, title"
												},
												{
													"key": "filter[identifier]",
													"value": "224000",
													"description": "Filter items by their spec id. Separate multiple values with commas",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Step 2.2 (optional): Create the Spec Section ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
													"    pm.expect(responseBody).to.be.an(\"object\");",
													"    pm.expect(responseBody).to.have.property(\"id\");",
													"    pm.expect(responseBody).to.have.property(\"identifier\");",
													"",
													"    pm.environment.set(\"spec_id\",responseBody.id);",
													"    pm.environment.set(\"spec_section_identifier\",responseBody.identifier);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function guid(format = 'xxxxxxxxxx') {",
													"    var d = new Date().getTime()",
													"",
													"    var guid = format.replace(",
													"        /[xy]/g,",
													"        function (c) {",
													"        var r = (d + Math.random() * 16) % 16 | 0",
													"        d = Math.floor(d / 16)",
													"        return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16)",
													"        })",
													"",
													"    return guid",
													"}",
													"",
													"Date.prototype.addDays = function(days) {",
													"    var date = new Date(this.valueOf());",
													"    date.setDate(date.getDate() + days);",
													"    return date;",
													"}",
													"",
													"pm.variables.set(\"spec_name\",  \"Materials-\"+ guid());",
													"",
													"let specSectionIdentifier = Number(pm.variables.get(\"spec_section_identifier\"));",
													"pm.variables.set(\"next_spec_section_identifier\",  specSectionIdentifier? specSectionIdentifier + 1 : 01);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"{{spec_name}}\",\n  \"identifier\": \"{{next_spec_section_identifier}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/specs",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"specs"
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Step 3: Find the Item Type ID",
							"item": [
								{
									"name": "Step 3: GET item-types",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
													"    pm.expect(responseBody.results).to.be.an(\"array\");",
													"",
													"    if(responseBody.results.length > 0) {",
													"        pm.environment.set(\"item_type_id\", responseBody.results[0].id);",
													"    }",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/item-types",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"item-types"
											],
											"query": [
												{
													"key": "limit",
													"value": "20",
													"description": "The maximum number of results per page. Possible values: 1- 50. Default value: 20.",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "20",
													"description": "The number of results to skip before starting to return data.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Step 4: Select a Custom Submittal Item Number (Optional)",
							"item": [
								{
									"name": "Step 4.1: Select a Custom Submittal Item Number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
													"    pm.expect(responseBody).to.be.an(\"object\");",
													"",
													"    pm.expect(responseBody).to.have.property(\"previousCustomIdentifier\");",
													"    pm.expect(responseBody).to.have.property(\"nextCustomIdentifier\");",
													"",
													"    pm.environment.set(\"next_custom_identifier\", responseBody.nextCustomIdentifier);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items:next-custom-identifier",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"items:next-custom-identifier"
											],
											"query": [
												{
													"key": "specId",
													"value": "{{spec_id}}",
													"description": "The item spec ID. This parameter is only required when the project is in spec sequence type (as opposed to global sequence).\nTo verify the sequence type, call GET metadata, and check customIdentifierSequenceType.\n\nTo get the spec ID, call GET specs, and select the relevant ID (id).",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Step 4.2: Select a Custom Submittal Item Number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customIdentifier\": \"{{next_custom_identifier}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items:validate-custom-identifier",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"items:validate-custom-identifier"
											],
											"query": [
												{
													"key": "specId",
													"value": "{{spec_id}}",
													"description": "The item spec ID. This parameter is only required when the project is in spec sequence type (as opposed to global sequence).\nTo verify the sequence type, call GET metadata, and check customIdentifierSequenceType.\n\nTo get the spec ID, call GET specs, and select the relevant ID (id).",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Step 5: Link a Manager to the Submittal Item",
							"item": [
								{
									"name": "Step 5: GET admin mappings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
													"    pm.expect(responseBody.results).to.be.an(\"array\");",
													"",
													"    // Here we find one user-typed manager",
													"    let managers = responseBody.results.filter(data => data.userType == 1); //!<<< Change 1 to other values for other admin type",
													"    let manager = managers[managers.length -1];",
													"",
													"    pm.expect(manager).to.not.null;",
													"    pm.expect(manager).to.has.property('autodeskId');",
													"",
													"    pm.environment.set(\"manager_user_id\", manager.autodeskId);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/settings/mappings",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"settings",
												"mappings"
											],
											"query": [
												{
													"key": "limit",
													"value": "20",
													"description": "The maximum number of results per page. Possible values: 1- 50. Default value: 20.",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "20",
													"description": "The number of results to skip before starting to return data.",
													"disabled": true
												},
												{
													"key": "filter[autodeskId]",
													"value": "{{manager_user_id}}",
													"description": "Comma-seperated list of Autodesk IDs for which the mappings will be returned.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Step 6: Get Review Templates",
							"item": [
								{
									"name": "Step 6: GET templates (Admin only)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"    pm.expect(responseBody).to.be.an(\"object\");",
													"",
													"    pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
													"",
													"    if(responseBody.results.length > 0) {",
													"        pm.environment.set(\"review_template_id\", responseBody.results[0].id);",
													"    }",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/templates",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"templates"
											],
											"query": [
												{
													"key": "limit",
													"value": "20",
													"description": "The number of results to return per page in the response payload. Possible values: 1- 50. Default value: 20. For example, to limit the response to two results per page, use limit=2.",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "20",
													"description": "The page number from which you want to begin results; for example, offset=20. For more details, see the JSON API Paging documentation.",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "createdAt desc",
													"description": "A comma-delimited list of fields to sort by in the format field asc or field desc.\nPossible values: id, name, createdAt, createdBy, updatedAt, updatedBy.\n\nFor example: sort=id asc.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Step 7: Create a Submittal Item",
							"item": [
								{
									"name": "Step 7.1: Create a Submittal Item by subcontractor",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"    pm.expect(responseBody).to.be.an(\"object\");",
													"    pm.expect(responseBody).to.have.property(\"id\");",
													"",
													"    pm.environment.set(\"item_id\",responseBody.id);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function guid(format = 'xxxxxxxxxx') {",
													"    var d = new Date().getTime()",
													"",
													"    var guid = format.replace(",
													"        /[xy]/g,",
													"        function (c) {",
													"        var r = (d + Math.random() * 16) % 16 | 0",
													"        d = Math.floor(d / 16)",
													"        return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16)",
													"        })",
													"",
													"    return guid",
													"}",
													"",
													"Date.prototype.addDays = function(days) {",
													"    var date = new Date(this.valueOf());",
													"    date.setDate(date.getDate() + days);",
													"    return date;",
													"}",
													"",
													"pm.variables.set(\"item_name\", \"Item-\" + guid());",
													"",
													"var submitDate = new Date();",
													"pm.variables.set(\"item_sumbmit_date\", submitDate.toISOString());",
													"pm.variables.set(\"item_due_date\", submitDate.addDays(7).toISOString().substring(0, 10));"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-request-id",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stateId\": \"mgr-1\",\n    \"specId\": \"{{spec_id}}\",\n    \"title\": \"{{item_name}}\",\n    \"typeId\": \"{{item_type_id}}\",\n    \"manager\": \"{{manager_user_id}}\",\n    \"managerType\": \"1\",\n    \n    \"description\": \"Tutorial Submittal Item created by ACC Submittal API Postman Scripts\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"items"
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Step 7.2: Create a Submittal Item on behalf of subcontractor by manager",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"    pm.expect(responseBody).to.be.an(\"object\");",
													"    pm.expect(responseBody).to.have.property(\"id\");",
													"",
													"    pm.environment.set(\"item_id\",responseBody.id);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function guid(format = 'xxxxxxxxxx') {",
													"    var d = new Date().getTime()",
													"",
													"    var guid = format.replace(",
													"        /[xy]/g,",
													"        function (c) {",
													"        var r = (d + Math.random() * 16) % 16 | 0",
													"        d = Math.floor(d / 16)",
													"        return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16)",
													"        })",
													"",
													"    return guid",
													"}",
													"",
													"Date.prototype.addDays = function(days) {",
													"    var date = new Date(this.valueOf());",
													"    date.setDate(date.getDate() + days);",
													"    return date;",
													"}",
													"",
													"pm.variables.set(\"item_name\", \"Item-\" + guid());",
													"",
													"var submitDate = new Date();",
													"pm.variables.set(\"item_sumbmit_date\", submitDate.toISOString());",
													"pm.variables.set(\"item_due_date\", submitDate.addDays(7).toISOString().substring(0, 10));"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-request-id",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customIdentifier\": \"{{next_custom_identifier}}\",\n    \"stateId\": \"sbc-1\",\n    \"specId\": \"{{spec_id}}\",\n    \"title\": \"{{item_name}}\",\n    \"typeId\": \"{{item_type_id}}\",\n    \"subcontractor\": \"{{user_id}}\",\n    \"subcontractorType\": \"1\",\n    \"submitterDueDate\": \"{{item_due_date}}\",\n\n    \"description\": \"Tutorial Submittal Item created by ACC Submittal API Postman Scripts\",\n    \"packageId\": \"{{package_id}}\",\n    \"templateId\": \"{{review_template_id}}\",\n    \"watchers\": []\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"items"
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Manage Submittal Item Transitions",
					"item": [
						{
							"name": "Step 0: Run Firstly-Get Project ID",
							"item": [
								{
									"name": "GET one ACC account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// find the specified project and setup the environment variable \"hub_id\"",
													"const hub_name = pm.variables.get(\"hub_name\");",
													"pm.test(\"find matches account by name: \" + hub_name, function () {",
													"    const body = JSON.parse(responseBody);",
													"    const found = body.data.find(d => d.attributes.name == hub_name);",
													"",
													"    pm.expect(found).to.not.be.undefined;",
													"    ",
													"    pm.environment.set(\"hub_id\", found.id);",
													"    pm.environment.set(\"account_id\", found.id.split(\"b.\").join(\"\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"hub_name\", \"change to your hub/account name\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_domain}}/project/v1/hubs?filter[extension.type]=hubs:autodesk.bim360:Account",
											"host": [
												"{{base_domain}}"
											],
											"path": [
												"project",
												"v1",
												"hubs"
											],
											"query": [
												{
													"key": "filter[extension.type]",
													"value": "hubs:autodesk.bim360:Account"
												}
											]
										},
										"description": "Returns a collection of accessible hubs for this member.<br/>\nhttps://forge.autodesk.com/en/docs/data/v2/reference/http/hubs-GET/"
									},
									"response": []
								},
								{
									"name": "GET one ACC project",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"project_name\", \"change to your project name\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// find the specified project and setup the environment variable \"project_id\"",
													"const project_name = pm.variables.get(\"project_name\") ",
													"pm.test(\"find matches project by name: \" + project_name, function () {",
													"    const body = JSON.parse(responseBody);",
													"    const found = body.data.find(d => d.attributes.name == project_name)",
													"",
													"    pm.expect(found).to.not.be.undefined;",
													"    ",
													"    postman.setEnvironmentVariable(\"project_id\", found.id);",
													"    postman.setEnvironmentVariable(\"project_id_without_b\", found.id.split(\"b.\").join(\"\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_domain}}project/v1/hubs/{{hub_id}}/projects",
											"host": [
												"{{base_domain}}project"
											],
											"path": [
												"v1",
												"hubs",
												"{{hub_id}}",
												"projects"
											]
										},
										"description": "Returns a collection of projects for a given hub_id. A project represents a BIM 360 Team project, a Fusion Team project, a BIM 360 Docs project, or an A360 Personal project. Multiple projects can be created within a single hub.<br/>\nhttps://forge.autodesk.com/en/docs/data/v2/reference/http/hubs-hub_id-projects-GET/"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Step 1: Verify User Permissions",
							"item": [
								{
									"name": "Step 1: GET one item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"    pm.expect(responseBody).to.has.property('id');",
													"    pm.expect(responseBody).to.has.property('permittedActions'); ",
													"});",
													"",
													"pm.test(\"Response body has the right to transit the item to mgr-1\", () => {",
													"    var responseBody = pm.response.json();",
													"    var permittedAction = responseBody.permittedActions.find(d => d.id == \"Item::wf_transition\");",
													"    pm.expect(permittedAction).to.not.be.null;",
													"",
													"    var transition = permittedAction.transitions.find(d => d.id == \"sbc-1::mgr-1\");",
													"    pm.expect(transition).to.not.be.null;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/:itemId",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"items",
												":itemId"
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												},
												{
													"key": "itemId",
													"value": "{{item_id}}",
													"description": "The ID of the submittal item. To find the item ID, call GET items."
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Step 2: Transition the Submittal Item to Prepare for Review (mgr-1) State",
							"item": [
								{
									"name": "Step 2.1: GET one manager",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
													"    pm.expect(responseBody.results).to.be.an(\"array\");",
													"",
													"    // Here we find one user-typed manager",
													"    let managers = responseBody.results.filter(data => data.userType == 1); //!<<< Change 1 to other values for other admin type",
													"    let manager = managers[managers.length -1];",
													"",
													"    pm.expect(manager).to.not.null;",
													"    pm.expect(manager).to.has.property('autodeskId');",
													"",
													"    pm.environment.set(\"manager_user_id\", manager.autodeskId);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/settings/mappings",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"settings",
												"mappings"
											],
											"query": [
												{
													"key": "limit",
													"value": "20",
													"description": "The maximum number of results per page. Possible values: 1- 50. Default value: 20.",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "20",
													"description": "The number of results to skip before starting to return data.",
													"disabled": true
												},
												{
													"key": "filter[autodeskId]",
													"value": "{{manager_user_id}}",
													"description": "Comma-seperated list of Autodesk IDs for which the mappings will be returned.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Step 2.2: POST item:transition to mar-1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"Date.prototype.addDays = function(days) {",
													"    var date = new Date(this.valueOf());",
													"    date.setDate(date.getDate() + days);",
													"    return date;",
													"}",
													"",
													"var submitDate = new Date();",
													"pm.variables.set(\"item_due_date\", submitDate.addDays(2).toISOString().substring(0, 10));"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty and stateId is mgr-1\", () => {",
													"    var responseBody = pm.response.json();",
													"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
													"    pm.expect(responseBody).to.be.an(\"object\");",
													"    pm.expect(responseBody).to.has.property('id');",
													"",
													"    pm.expect(responseBody).to.has.property('stateId').and.to.be.string(\"mgr-1\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stateId\": \"mgr-1\",\n    \"manager\": \"{{manager_user_id}}\",\n    \"managerType\": \"1\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/{{item_id}}:transition",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"items",
												"{{item_id}}:transition"
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Step 3: Retrieve Details for Transition to Review (rev) State",
							"item": [
								{
									"name": "Step 3: GET one item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"    pm.expect(responseBody).to.has.property('id');",
													"    pm.expect(responseBody).to.has.property('permittedActions'); ",
													"});",
													"",
													"pm.test(\"Response body has the right to transit the item to rev\", () => {",
													"    var responseBody = pm.response.json();",
													"    var permittedAction = responseBody.permittedActions.find(d => d.id == \"Item::wf_transition\");",
													"    pm.expect(permittedAction).to.not.be.null;",
													"",
													"    var transition = permittedAction.transitions.find(d => d.id == \"mgr-1::rev\");",
													"    pm.expect(transition).to.not.be.null;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/:itemId",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"items",
												":itemId"
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												},
												{
													"key": "itemId",
													"value": "{{item_id}}",
													"description": "The ID of the submittal item. To find the item ID, call GET items."
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Step 4: Transition to Review (rev) State",
							"item": [
								{
									"name": "Step 2.2: POST item:transition to rev",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"Date.prototype.addDays = function(days) {",
													"    var date = new Date(this.valueOf());",
													"    date.setDate(date.getDate() + days);",
													"    return date;",
													"}",
													"",
													"var submitDate = new Date();",
													"pm.variables.set(\"item_due_date\", submitDate.addDays(2).toISOString().substring(0, 10));"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty and stateId is rev\", () => {",
													"    var responseBody = pm.response.json();",
													"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
													"    pm.expect(responseBody).to.be.an(\"object\");",
													"    pm.expect(responseBody).to.has.property('id');",
													"",
													"    pm.expect(responseBody).to.has.property('stateId').and.to.be.string(\"rev\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stateId\": \"rev\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/{{item_id}}:transition",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"items",
												"{{item_id}}:transition"
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Step 5: Retrieve the Review Task and Step IDs",
							"item": [
								{
									"name": "Step 5.1: GET item steps",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty and has an in-progress step \", () => {",
													"    var responseBody = pm.response.json();",
													"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
													"    pm.expect(responseBody).to.be.an(\"object\");",
													"",
													"    if(responseBody.results.length > 0) {",
													"        pm.expect(responseBody.results[0].status).to.have.string(\"in-progress\");",
													"        pm.environment.set(\"review_step_id\", responseBody.results[0].id);",
													"    }",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/:itemId/steps",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"items",
												":itemId",
												"steps"
											],
											"query": [
												{
													"key": "limit",
													"value": "20",
													"description": "The number of results to return per page in the response payload. Possible values: 1- 50. Default value: 20. For example, to limit the response to two results per page, use limit=2.",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "20",
													"description": "The page number from which you want to begin results; for example, offset=20. For more details, see the JSON API Paging documentation.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												},
												{
													"key": "itemId",
													"value": "{{item_id}}",
													"description": "The ID of the submittal item. To find the item ID, call GET items."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Step 5.2: GET tasks",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty and has an in-progress task \", () => {",
													"    var responseBody = pm.response.json();",
													"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
													"    pm.expect(responseBody).to.be.an(\"object\");",
													"",
													"    if(responseBody.results.length > 0) {",
													"        pm.expect(responseBody.results[0].status).to.have.string(\"in-progress\");",
													"        pm.environment.set(\"review_step_task_id\", responseBody.results[0].id);",
													"    }",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/:itemId/steps/:stepId/tasks",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"items",
												":itemId",
												"steps",
												":stepId",
												"tasks"
											],
											"query": [
												{
													"key": "limit",
													"value": "1",
													"description": "The number of results to return per page in the response payload. Possible values: 1- 50. Default value: 20. For example, to limit the response to two results per page, use limit=2.",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "1",
													"description": "The page number from which you want to begin results; for example, offset=20. For more details, see the JSON API Paging documentation.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project.\nUse the Data Management API to retrieve the project ID. For more information, see the Retrieve a Project ID tutorial. You need to convert the project ID into a project ID for the ACC API by removing the “b.\" prefix. For example, a project ID of b.a4be0c34a-4ab7 translates to a project ID of a4be0c34a-4ab7."
												},
												{
													"key": "itemId",
													"value": "{{item_id}}",
													"description": "The ID of the item. To find the item ID, call GET items."
												},
												{
													"key": "stepId",
													"value": "{{review_step_id}}",
													"description": "The ID of the review step. To get the step ID for a specific submittal item, call GET steps."
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Step 6: Retrieve the List of Possible Responses",
							"item": [
								{
									"name": "Step 6: GET Responses",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"    pm.expect(responseBody.results).to.be.an(\"array\");",
													"",
													"    if(responseBody.results.length > 0) {",
													"        var approvedResponse = responseBody.results.find(d => d.value == \"Approved\");",
													"        pm.expect(approvedResponse).not.to.be.null;",
													"",
													"        pm.environment.set(\"response_id\", approvedResponse.id);",
													"    }",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/responses",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"responses"
											],
											"query": [
												{
													"key": "limit",
													"value": "20",
													"description": "The maximum number of results per page. Possible values: 1- 50. Default value: 20.",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "20",
													"description": "The number of results to skip before starting to return data.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Step 7: Submit the Reviewer’s Review",
							"item": [
								{
									"name": "Step 7: POST task:close",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty and task status is completed\", () => {",
													"    var responseBody = pm.response.json();",
													"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
													"    pm.expect(responseBody).to.be.an(\"object\");",
													"    pm.expect(responseBody).to.has.property('id');",
													"",
													"    pm.expect(responseBody).to.has.property('status').and.to.be.string(\"completed\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"responseId\": \"{{response_id}}\",\n    \"responseComment\": \"reviewed and approved\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/:itemId/steps/:stepId/tasks/{{review_step_task_id}}:close",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"items",
												":itemId",
												"steps",
												":stepId",
												"tasks",
												"{{review_step_task_id}}:close"
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												},
												{
													"key": "itemId",
													"value": "{{item_id}}",
													"description": "The ID of the submittal item. To find the item ID, call GET items."
												},
												{
													"key": "stepId",
													"value": "{{review_step_id}}",
													"description": "The ID of the review step. To get the step ID for a specific submittal item, call GET steps."
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Step 8: Transition to Close and Distribute (mgr-2)",
							"item": [
								{
									"name": "Step 8.1: GET item steps",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty and all steps are complated\", () => {",
													"    var responseBody = pm.response.json();",
													"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
													"    pm.expect(responseBody).to.be.an(\"object\");",
													"",
													"    if(responseBody.results.length > 0) {",
													"        var areAllTasksCompleted = responseBody.results.map(s => s.tasks.every(d => d.status == \"completed\"));",
													"        pm.expect(areAllTasksCompleted.flat().every(d => d == true)).to.be.true;",
													"    }",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/:itemId/steps",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"items",
												":itemId",
												"steps"
											],
											"query": [
												{
													"key": "limit",
													"value": "20",
													"description": "The number of results to return per page in the response payload. Possible values: 1- 50. Default value: 20. For example, to limit the response to two results per page, use limit=2.",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "20",
													"description": "The page number from which you want to begin results; for example, offset=20. For more details, see the JSON API Paging documentation.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												},
												{
													"key": "itemId",
													"value": "{{item_id}}",
													"description": "The ID of the submittal item. To find the item ID, call GET items."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Step 8.2: GET one item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"    pm.expect(responseBody).to.has.property('id');",
													"    pm.expect(responseBody).to.has.property('permittedActions'); ",
													"});",
													"",
													"pm.test(\"Response body has the right to transit the item to sbc-2\", () => {",
													"    var responseBody = pm.response.json();",
													"    var permittedAction = responseBody.permittedActions.find(d => d.id == \"Item::wf_transition\");",
													"    pm.expect(permittedAction).to.not.be.null;",
													"",
													"    var transition = permittedAction.transitions.find(d => d.id == \"mgr-2::sbc-2\");",
													"    pm.expect(transition).to.not.be.null;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/:itemId",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"items",
												":itemId"
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												},
												{
													"key": "itemId",
													"value": "{{item_id}}",
													"description": "The ID of the submittal item. To find the item ID, call GET items."
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Step 9: Close the Submittal Item",
							"item": [
								{
									"name": "Step 9: GET Responses",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"    pm.expect(responseBody.results).to.be.an(\"array\");",
													"",
													"    if(responseBody.results.length > 0) {",
													"        var approvedResponse = responseBody.results.find(d => d.value == \"Approved\");",
													"        pm.expect(approvedResponse).not.to.be.null;",
													"",
													"        pm.environment.set(\"response_id\", approvedResponse.id);",
													"    }",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/responses",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"responses"
											],
											"query": [
												{
													"key": "limit",
													"value": "20",
													"description": "The maximum number of results per page. Possible values: 1- 50. Default value: 20.",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "20",
													"description": "The number of results to skip before starting to return data.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Step 9.2: POST item:transition to sbc-2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"Date.prototype.addDays = function(days) {",
													"    var date = new Date(this.valueOf());",
													"    date.setDate(date.getDate() + days);",
													"    return date;",
													"}",
													"",
													"var submitDate = new Date();",
													"pm.variables.set(\"item_due_date\", submitDate.addDays(2).toISOString().substring(0, 10));"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty and stateId is sbc-2\", () => {",
													"    var responseBody = pm.response.json();",
													"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
													"    pm.expect(responseBody).to.be.an(\"object\");",
													"    pm.expect(responseBody).to.has.property('id');",
													"",
													"    pm.expect(responseBody).to.has.property('stateId').and.to.be.string(\"sbc-2\");",
													"    pm.expect(responseBody).to.has.property('statusId').and.to.eqls(\"3\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stateId\": \"sbc-2\",\n    \"responseComment\": \"final response\",\n    \"responseId\": \"{{response_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_domain}}construction/submittals/v2/projects/:projectId/items/{{item_id}}:transition",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"submittals",
												"v2",
												"projects",
												":projectId",
												"items",
												"{{item_id}}:transition"
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{project_id_without_b}}",
													"description": "The ID of the project."
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "scope",
				"value": "data:read data:write",
				"type": "string"
			},
			{
				"key": "client_authentication",
				"value": "header",
				"type": "string"
			},
			{
				"key": "accessTokenUrl",
				"value": "{{base_domain}}authentication/v2/token",
				"type": "string"
			},
			{
				"key": "authUrl",
				"value": "{{base_domain}}authentication/v2/authorize",
				"type": "string"
			},
			{
				"key": "clientSecret",
				"value": "{{client_secret}}",
				"type": "string"
			},
			{
				"key": "clientId",
				"value": "{{client_id}}",
				"type": "string"
			},
			{
				"key": "tokenName",
				"value": "3LO Access Token",
				"type": "string"
			},
			{
				"key": "challengeAlgorithm",
				"value": "S256",
				"type": "string"
			},
			{
				"key": "redirect_uri",
				"value": "https://www.postman.com/oauth2/callback",
				"type": "string"
			},
			{
				"key": "grant_type",
				"value": "authorization_code",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
{
	"info": {
		"_postman_id": "0dd296a9-1781-4b3d-bedc-1badba630b7f",
		"name": "Form API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7186"
	},
	"item": [
		{
			"name": "Run Firstly-Get Project ID and Assignee ID",
			"item": [
				{
					"name": "01-GET one ACC account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get account collection, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var accountName = pm.collectionVariables.get(\"accountName\") ",
									"pm.test(\"find matches account by name: \" + accountName, function () {",
									"    var body = JSON.parse(responseBody);",
									"    var find = body.data.find(d=>d.attributes.name == accountName)",
									"    pm.expect(find).not.eq(undefined); ",
									"    if(find) ",
									"        pm.collectionVariables.set(\"accountId\", find.id.split(\"b.\").join(\"\"));",
									"    ",
									"});",
									"",
									"     "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{APSBaseDomain}}/project/v1/hubs",
							"host": [
								"{{APSBaseDomain}}"
							],
							"path": [
								"project",
								"v1",
								"hubs"
							]
						}
					},
					"response": []
				},
				{
					"name": "02-GET one ACC project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get project collection, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var projectName = pm.collectionVariables.get(\"projectName\") ",
									"pm.test(\"find matches project by name: \" + projectName, function () {",
									"    var body = JSON.parse(responseBody);",
									"    var find = body.data.find(d=>d.attributes.name == projectName) ",
									"    pm.expect(find).not.eq(undefined);   ",
									"    if(find)",
									"        pm.collectionVariables.set(\"projectId\", find.id.split(\"b.\").join(\"\")); ",
									"",
									"});",
									"",
									"     "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{APSBaseDomain}}/project/v1/hubs/b.{{accountId}}/projects",
							"host": [
								"{{APSBaseDomain}}"
							],
							"path": [
								"project",
								"v1",
								"hubs",
								"b.{{accountId}}",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "03-[!!GAP!!] Get One Project User Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "NO Endpoint for ACC yet to get project members, please use workaround 03-1 and 03-2",
							"host": [
								"NO Endpoint for ACC yet to get project members, please use workaround 03-1 and 03-2"
							]
						}
					},
					"response": []
				},
				{
					"name": "03-1 [workaround]Authentication 2-legged token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"access_token\", data.access_token); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var keys = pm.collectionVariables.get(\"clientId\") + \":\" + pm.collectionVariables.get(\"clientSecret\");",
									"let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys)); ",
									"pm.collectionVariables.set(\"encodedKeys\",encodedKeys);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Accept",
								"value": "json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic {{encodedKeys}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "account:read",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{APSBaseDomain}}authentication/v2/token",
							"host": [
								"{{APSBaseDomain}}authentication"
							],
							"path": [
								"v2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "03-2 [Workaround-2LO] Get One Account User Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get account users, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var one_user_email = pm.collectionVariables.get(\"one_user_email_as_assignee\");",
									"",
									"pm.test(\"find one user id by email: \" + one_user_email, function () {",
									"    var body = JSON.parse(responseBody);",
									"    var find = body.find(d=>d.email==one_user_email)  ",
									"",
									"    pm.expect(find).not.eq(undefined); ",
									"    pm.collectionVariables.set(\"assignee_id\", find.uid); ",
									"    ",
									"});",
									"",
									"  "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{APSBaseDomain}}hq/v1/accounts/:account_id/users",
							"host": [
								"{{APSBaseDomain}}hq"
							],
							"path": [
								"v1",
								"accounts",
								":account_id",
								"users"
							],
							"variable": [
								{
									"key": "account_id",
									"value": "{{accountId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tutorials",
			"item": [
				{
					"name": "Get Forms",
					"item": [
						{
							"name": "Step 1: Find the ID of ACC Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Step 1: Find the ID of ACC Account, Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var accountName = pm.collectionVariables.get(\"accountName\") ",
											"console.log(accountName)",
											"pm.test(\"find matches account by name: \" + accountName, function () {",
											"    var body = JSON.parse(responseBody);",
											"    var find = body.data.find(d=>d.attributes.name == accountName)",
											"    pm.expect(find).not.eq(undefined); ",
											"    if(find) ",
											"        pm.collectionVariables.set(\"accountId\", find.id.split(\"b.\").join(\"\"));",
											"    ",
											"});",
											"",
											"     "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APSBaseDomain}}/project/v1/hubs",
									"host": [
										"{{APSBaseDomain}}"
									],
									"path": [
										"project",
										"v1",
										"hubs"
									]
								},
								"description": "GET all hubs of your account, and get one hub. Please provide the hub name (hub_name) in environment variables"
							},
							"response": []
						},
						{
							"name": "Step 2: Find the Project ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Step 2: Find the Project ID, Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var projectName = pm.collectionVariables.get(\"projectName\") ",
											"pm.test(\"find matches project by name: \" + projectName, function () {",
											"    var body = JSON.parse(responseBody);",
											"    var find = body.data.find(d=>d.attributes.name == projectName) ",
											"    pm.expect(find).not.eq(undefined);   ",
											"    if(find)",
											"        pm.collectionVariables.set(\"projectId\", find.id.split(\"b.\").join(\"\")); ",
											"",
											"});",
											"",
											"     "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APSBaseDomain}}/project/v1/hubs/b.{{accountId}}/projects",
									"host": [
										"{{APSBaseDomain}}"
									],
									"path": [
										"project",
										"v1",
										"hubs",
										"b.{{accountId}}",
										"projects"
									]
								},
								"description": "GET all projects of one hub, and get one project Please provide the hub name (project_name) in environment variables"
							},
							"response": []
						},
						{
							"name": "Step 3: Get one non-pdf and one pdf template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Step 3: Get one non-pdf and one pdf template, Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"find one pdf template id and signed url: \" , function () {",
											"    const body = JSON.parse(responseBody);",
											"    const find = body.data.find(d=>d.isPdf==true )",
											"",
											"    pm.expect(find).not.eq(undefined); ",
											"    ",
											"    if(find){",
											"        pm.collectionVariables.set(\"pdf_template_id\", find.id); ",
											"        //var sections = find.pdfUrl.split(\"?\"); ",
											"        pm.collectionVariables.set(\"signed_url\", find.pdfUrl); ",
											"     } ",
											"});",
											"",
											"pm.test(\"find one non-pdf template: \" , function () {",
											"    const body = JSON.parse(responseBody);",
											"    const find = body.data.find(d=>d.isPdf==false )",
											"",
											"    pm.expect(find).not.eq(undefined); ",
											"    ",
											"    if(find){",
											"        pm.collectionVariables.set(\"non_pdf_template_id\", find.id); ",
											"     } ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APSBaseDomain}}construction/forms/v1/projects/:projectId/form-templates?offset=0&limit=50",
									"host": [
										"{{APSBaseDomain}}construction"
									],
									"path": [
										"forms",
										"v1",
										"projects",
										":projectId",
										"form-templates"
									],
									"query": [
										{
											"key": "offset",
											"value": "0",
											"description": "Number of results to skip."
										},
										{
											"key": "updatedAfter",
											"value": "2021-02-28T00:00:00",
											"description": "Return Templates updated after specified time.",
											"disabled": true
										},
										{
											"key": "updatedBefore",
											"value": "<dateTime>",
											"description": "Return Templates updated before specified time.",
											"disabled": true
										},
										{
											"key": "sortOrder",
											"value": "<string>",
											"description": "Return Templates in specified sorted order.",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "50"
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{projectId}}",
											"description": "(Required) Unique identifier of the project."
										}
									]
								},
								"description": "Returns all project's form templates the user has access to."
							},
							"response": []
						},
						{
							"name": "Step 4: Download one pdf template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Download one pdf template, Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{signed_url}}",
									"host": [
										"{{signed_url}}"
									]
								},
								"description": "Returns all project's form templates the user has access to."
							},
							"response": []
						},
						{
							"name": "Step 5: Get forms of non-pdf form template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Step 5: Get forms of non-pdf form template, Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IlU3c0dGRldUTzlBekNhSzBqZURRM2dQZXBURVdWN2VhIn0.eyJzY29wZSI6WyJhY2NvdW50OnJlYWQiLCJhY2NvdW50OndyaXRlIiwiYnVja2V0OmNyZWF0ZSIsImJ1Y2tldDpyZWFkIiwiYnVja2V0OnVwZGF0ZSIsImJ1Y2tldDpkZWxldGUiLCJkYXRhOnJlYWQiLCJkYXRhOndyaXRlIiwiZGF0YTpjcmVhdGUiLCJkYXRhOnNlYXJjaCIsInVzZXI6cmVhZCIsInVzZXI6d3JpdGUiLCJ1c2VyLXByb2ZpbGU6cmVhZCIsInZpZXdhYmxlczpyZWFkIl0sImNsaWVudF9pZCI6IktrSmZwTVoyZ2NBWEEzZ25EUkdod3Z5UDdaSG1tV25aIiwiYXVkIjoiaHR0cHM6Ly9hdXRvZGVzay5jb20vYXVkL2Fqd3RleHA2MCIsImp0aSI6Imk1S2ZOT1prRFNlWmtuRmxyT2VrNjNBVVVSOTZrMHc3VFc4VGxqUndYdWliYkRDeWRkNUU1aFRkSEV1UWtmajYiLCJ1c2VyaWQiOiJRRjQ1TlJXOE5LRzQiLCJleHAiOjE2MTE2MTk1OTJ9.BcZ08zvGqKaKN7h1nF2c9blVCbYq3TqHxKpeq-RXsaLJ6GuaJSC7q1pay91dl-jUzIan6a2yBJKgKDdLPNHmBU8_7X9qLRz0Rm9IhGPvq_t4FD16dggXxWBK6YwvoxQW7qO6X9-fK4V1-QFGUBISFwrd3uNnFx-YVxbvZuIXIeZDV2SJ6tG3zf0R5gLMR6QX9Ry2H1W8thnACa6_Mfp40J4KQFj9oHODvkBRFFfl6tf0L3p-0qt1Y8mJZ0CpSeEm6cavk43Nr0ZVzDeGyPvA4eSySk9g4vYx5scg4tMqYjggutlPQshXL5_Bgox_0fswEomykBVxIbGZZ9z8d5uwaw",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{APSBaseDomain}}construction/forms/v1/projects/:projectId/forms?templateId={{non_pdf_template_id}}",
									"host": [
										"{{APSBaseDomain}}construction"
									],
									"path": [
										"forms",
										"v1",
										"projects",
										":projectId",
										"forms"
									],
									"query": [
										{
											"key": "offset",
											"value": "0",
											"description": "The number of records to skip before returning the result records. Defaults to 0. Increase this value in subsequent requests to continue getting results when the number of records exceeds the requested limit.",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "50",
											"description": "The number of records to return in a single request. Can be a number between 1 and 50. Defaults to 50.",
											"disabled": true
										},
										{
											"key": "ids",
											"value": "<string>",
											"description": "An array of Form IDs to retrieve.",
											"disabled": true
										},
										{
											"key": "formDateMin",
											"value": "<date>",
											"description": "Return Forms with formDate at or after specified date.",
											"disabled": true
										},
										{
											"key": "formDateMax",
											"value": "<date>",
											"description": "Return Forms with formDate at or before specified date.",
											"disabled": true
										},
										{
											"key": "updatedAfter",
											"value": "<dateTime>",
											"description": "Return Forms updated after a specified time.",
											"disabled": true
										},
										{
											"key": "updatedBefore",
											"value": "<dateTime>",
											"description": "Return Forms updated before a specified time.",
											"disabled": true
										},
										{
											"key": "templateId",
											"value": "<string>",
											"description": "Return Forms on template with given ID.",
											"disabled": true
										},
										{
											"key": "statuses",
											"value": "<string>",
											"description": "Return Forms with given statuses.",
											"disabled": true
										},
										{
											"key": "sortBy",
											"value": "<string>",
											"description": "Return Forms sorted by specified attribute.",
											"disabled": true
										},
										{
											"key": "sortOrder",
											"value": "<string>",
											"description": "Return Forms in specified sorted order.",
											"disabled": true
										},
										{
											"key": "templateId",
											"value": "{{non_pdf_template_id}}"
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{projectId}}",
											"description": "(Required) Unique identifier of the project."
										}
									]
								},
								"description": "Returns a paginated list of forms in a project. Forms are sorted by updatedAt, most recent first."
							},
							"response": []
						},
						{
							"name": "Step 6: Get forms of pdf template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Step 6: Get forms of pdf template, Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"find one pdf form signed url: \" , function () {",
											"    const body = JSON.parse(responseBody);",
											"    const find = body.data.find(d=>d.pdfUrl!=\"\" )",
											"",
											"    pm.expect(find).not.eq(undefined); ",
											"    ",
											"    if(find){",
											"        pm.collectionVariables.set(\"one_pdf_form_id\", find.id); ",
											"        pm.collectionVariables.set(\"signed_url\", find.pdfUrl);   ",
											"     } ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APSBaseDomain}}construction/forms/v1/projects/:projectId/forms?templateId={{pdf_template_id}}",
									"host": [
										"{{APSBaseDomain}}construction"
									],
									"path": [
										"forms",
										"v1",
										"projects",
										":projectId",
										"forms"
									],
									"query": [
										{
											"key": "offset",
											"value": "0",
											"description": "Number of results to skip.",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "50",
											"description": "Number of results to retrieve.",
											"disabled": true
										},
										{
											"key": "ids",
											"value": "<string>",
											"description": "An array of Form IDs to retrieve.",
											"disabled": true
										},
										{
											"key": "formDateMin",
											"value": "<date>",
											"description": "Return Forms with formDate at or after specified date.",
											"disabled": true
										},
										{
											"key": "formDateMax",
											"value": "<date>",
											"description": "Return Forms with formDate at or before specified date.",
											"disabled": true
										},
										{
											"key": "updatedAfter",
											"value": "<dateTime>",
											"description": "Return Forms updated after a specified time.",
											"disabled": true
										},
										{
											"key": "updatedBefore",
											"value": "<dateTime>",
											"description": "Return Forms updated before a specified time.",
											"disabled": true
										},
										{
											"key": "templateId",
											"value": "<string>",
											"description": "Return Forms on template with given ID.",
											"disabled": true
										},
										{
											"key": "statuses",
											"value": "<string>",
											"description": "Return Forms with given statuses.",
											"disabled": true
										},
										{
											"key": "sortBy",
											"value": "<string>",
											"description": "Return Forms sorted by specified attribute.",
											"disabled": true
										},
										{
											"key": "sortOrder",
											"value": "<string>",
											"description": "Return Forms in specified sorted order.",
											"disabled": true
										},
										{
											"key": "templateId",
											"value": "{{pdf_template_id}}"
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{projectId}}",
											"description": "(Required) Unique identifier of the project."
										}
									]
								},
								"description": "Returns a paginated list of forms in a project. Forms are sorted by updatedAt, most recent first."
							},
							"response": []
						},
						{
							"name": "Step 7: Download pdf form",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Step 7: Download pdf form, Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{signed_url}}",
									"host": [
										"{{signed_url}}"
									]
								},
								"description": "Returns all project's form templates the user has access to."
							},
							"response": []
						}
					]
				},
				{
					"name": "Retrieve Forms Associated With Specific Locations",
					"item": [
						{
							"name": "Step 1: Find the Locations for the Project",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Step 1: Find the Locations for the Project, Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											" ",
											" pm.test(\"find one location id\", function () {",
											"    var body = JSON.parse(responseBody);",
											"    pm.expect(body.results).not.eq(undefined); ",
											"    pm.collectionVariables.set(\"locationId\", body.results[0].id);",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APSBaseDomain}}construction/locations/v2/projects/:projectId/trees/:treeId/nodes",
									"host": [
										"{{APSBaseDomain}}construction"
									],
									"path": [
										"locations",
										"v2",
										"projects",
										":projectId",
										"trees",
										":treeId",
										"nodes"
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{projectId}}"
										},
										{
											"key": "treeId",
											"value": "default"
										}
									]
								},
								"description": "GET all hubs of your account, and get one hub. Please provide the hub name (hub_name) in environment variables"
							},
							"response": []
						},
						{
							"name": "Step 2: Find the Forms by Location",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Step 2: Find the Forms by Location, Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var accountName = pm.collectionVariables.get(\"accountName\") ",
											"pm.test(\"find matches forms by location\", function () {",
											"    var body = JSON.parse(responseBody);",
											"    var find = body.data.find(d=>d.attributes.name == accountName)",
											"    pm.expect(find).not.eq(undefined); ",
											"    if(find) ",
											"        pm.collectionVariables.set(\"accountId\", find.id.split(\"b.\").join(\"\"));",
											"    ",
											"});",
											"",
											"     "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APSBaseDomain}}/construction/forms/v1/projects/:projectId/forms?locationIds={{locationId}}",
									"host": [
										"{{APSBaseDomain}}"
									],
									"path": [
										"construction",
										"forms",
										"v1",
										"projects",
										":projectId",
										"forms"
									],
									"query": [
										{
											"key": "locationIds",
											"value": "{{locationId}}"
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{projectId}}"
										}
									]
								},
								"description": "GET all hubs of your account, and get one hub. Please provide the hub name (hub_name) in environment variables"
							},
							"response": []
						}
					]
				},
				{
					"name": "Manage Forms",
					"item": [
						{
							"name": "Step 1: Find the Form Template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Step 1: Find the Form Template, Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"}); ",
											"",
											"pm.test(\"find first template id: \", function () {",
											"    var body = JSON.parse(responseBody); ",
											"    pm.expect(body.data).not.eq(undefined);  ",
											"    //to test with Update Field Values, find a non-PDF form",
											"    var nonPDFForm = body.data.find(i=>!i.isPdf)",
											"    if(nonPDFForm) ",
											"        pm.collectionVariables.set(\"templateId\",nonPDFForm.id) ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{APSBaseDomain}}construction/forms/v1/projects/:projectId/form-templates",
									"host": [
										"{{APSBaseDomain}}construction"
									],
									"path": [
										"forms",
										"v1",
										"projects",
										":projectId",
										"form-templates"
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{projectId}}"
										}
									]
								},
								"description": "GET all hubs of your account, and get one hub. Please provide the hub name (hub_name) in environment variables"
							},
							"response": []
						},
						{
							"name": "Step 2: Create a Form",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var d = new Date()",
											"var current_date_time = d.getFullYear() ",
											"                +\"-\" + ((\"0\" + (d.getUTCMonth()+1)).slice(-2) )",
											"                + \"-\" +  (\"0\" + d.getUTCDate()).slice(-2)",
											"                + \"-\" +  (\"0\" + d.getHours()).slice(-2) ",
											"                + \"-\" +  (\"0\" + d.getMinutes()).slice(-2)",
											"",
											"pm.collectionVariables.set(\"current_date_time\", current_date_time);",
											"  "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Step 2: Create a Form, Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    var body = JSON.parse(responseBody); ",
											"",
											"    //get form id and ids of custom fields and tabular fields ",
											"    pm.collectionVariables.set(\"formId\",body.id);",
											"",
											"    //find first field of text value",
											"    var textVal_Field = body.customValues.find(i=>i.valueName == 'textVal');",
											"    if(textVal_Field)",
											"        pm.collectionVariables.set(\"textVal_Field_Id\",textVal_Field.fieldId);",
											"    ",
											"    //find first field of number value",
											"    var numberVal_Field = body.customValues.find(i=>i.valueName == 'numberVal');",
											"    if(numberVal_Field)",
											"        pm.collectionVariables.set(\"numberVal_Field_Id\",numberVal_Field.fieldId);",
											"",
											"    //find first field of date value",
											"    var dateVal_Field = body.customValues.find(i=>i.valueName == 'dateVal');",
											"    if(dateVal_Field)",
											"        pm.collectionVariables.set(\"dateVal_Field_Id\",dateVal_Field.fieldId);",
											"",
											"     //find first field of date value",
											"    var toggleVal_Field = body.customValues.find(i=>i.valueName == 'toggleVal');",
											"    if(toggleVal_Field)",
											"        pm.collectionVariables.set(\"toggleVal_Field_Id\",toggleVal_Field.fieldId);",
											"    ",
											"     //find signature field",
											"    var svgVal_Field = body.customValues.find(i=>i.valueName == 'svgVal');",
											"    if(svgVal_Field)",
											"        pm.collectionVariables.set(\"svgVal_Field_Id\",svgVal_Field.fieldId);",
											"",
											"     //find first field of choice value",
											"    var choiceVal_Field = body.customValues.find(i=>i.valueName == 'choiceVal_Field');",
											"    if(choiceVal_Field)",
											"        pm.collectionVariables.set(\"choiceVal_Field_Id\",choiceVal_Field.fieldId);",
											"    ",
											"    //find first field of array value",
											"    var arrayVal_Field = body.customValues.find(i=>i.valueName == 'arrayVal_Field');",
											"    if(arrayVal_Field)",
											"        pm.collectionVariables.set(\"arrayVal_Field_Id\",arrayVal_Field.fieldId);",
											"",
											"    //Table Values",
											"    //check if any table is defined",
											"    if(body.tabularValues && body.tabularValues.hasOwnProperty(\"equipmentEntries\"))",
											"        pm.collectionVariables.set(\"equipmentEntries\",true);",
											"    if(body.tabularValues && body.tabularValues.hasOwnProperty(\"materialsEntries\"))",
											"        pm.collectionVariables.set(\"materialsEntries\",true);",
											"     if(body.tabularValues && body.tabularValues.hasOwnProperty(\"worklogEntries\"))",
											"        pm.collectionVariables.set(\"worklogEntries\",true); ",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\":\"Create Forms by API\",\n    \"notes\":\"Create Forms by API\",\n    \"formDate\":\"{{current_date_time}}\",\n    \"userCreatedAt\": \"2023-01-01T20:38:32+00:00\"\n}"
								},
								"url": {
									"raw": "{{APSBaseDomain}}construction/forms/v1/projects/:projectId/form-templates/:templateId/forms",
									"host": [
										"{{APSBaseDomain}}construction"
									],
									"path": [
										"forms",
										"v1",
										"projects",
										":projectId",
										"form-templates",
										":templateId",
										"forms"
									],
									"query": [
										{
											"key": "offset",
											"value": "0",
											"description": "The number of records to skip before returning the result records. Defaults to 0. Increase this value in subsequent requests to continue getting results when the number of records exceeds the requested limit.",
											"disabled": true
										},
										{
											"key": "updatedAfter",
											"value": "2021-02-28T00:00:00",
											"description": "Return Templates updated after specified time.",
											"disabled": true
										},
										{
											"key": "updatedBefore",
											"value": "<dateTime>",
											"description": "Return Templates updated before specified time.",
											"disabled": true
										},
										{
											"key": "sortOrder",
											"value": "<string>",
											"description": "Return Templates in specified sorted order. Possible values: desc, asc",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "50",
											"description": "The number of records to return in a single request. Can be a number between 1 and 50. Defaults to 50.\n",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{projectId}}",
											"description": "(Required) Unique identifier of the project."
										},
										{
											"key": "templateId",
											"value": "{{templateId}}"
										}
									]
								},
								"description": "Returns all project's form templates the user has access to."
							},
							"response": []
						},
						{
							"name": "Step 3: Add Form Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Step 3: Add Form Details, Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"}); ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"Updated via the API\" \n}"
								},
								"url": {
									"raw": "{{APSBaseDomain}}construction/forms/v1/projects/:projectId/form-templates/:templateId/forms/:formId",
									"host": [
										"{{APSBaseDomain}}construction"
									],
									"path": [
										"forms",
										"v1",
										"projects",
										":projectId",
										"form-templates",
										":templateId",
										"forms",
										":formId"
									],
									"query": [
										{
											"key": "offset",
											"value": "0",
											"description": "The number of records to skip before returning the result records. Defaults to 0. Increase this value in subsequent requests to continue getting results when the number of records exceeds the requested limit.",
											"disabled": true
										},
										{
											"key": "updatedAfter",
											"value": "2021-02-28T00:00:00",
											"description": "Return Templates updated after specified time.",
											"disabled": true
										},
										{
											"key": "updatedBefore",
											"value": "<dateTime>",
											"description": "Return Templates updated before specified time.",
											"disabled": true
										},
										{
											"key": "sortOrder",
											"value": "<string>",
											"description": "Return Templates in specified sorted order. Possible values: desc, asc",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "50",
											"description": "The number of records to return in a single request. Can be a number between 1 and 50. Defaults to 50.\n",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{projectId}}",
											"description": "(Required) Unique identifier of the project."
										},
										{
											"key": "templateId",
											"value": "{{templateId}}"
										},
										{
											"key": "formId",
											"value": "{{formId}}"
										}
									]
								},
								"description": "Returns all project's form templates the user has access to."
							},
							"response": []
						},
						{
							"name": "Step 4: Update the Form Fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//produce payload for updating values of custom fields",
											"//check the availability of the fields of different types",
											"",
											"var payload = { ",
											"     customValues:[],",
											"     tabularValues:[]",
											"}",
											"",
											"",
											"//update signature",
											"var svgVal_Field_Id = pm.collectionVariables.get(\"svgVal_Field_Id\")",
											"if(svgVal_Field_Id)",
											" payload.customValues.push({",
											"        fieldId:svgVal_Field_Id,",
											"        svgVal:\"\",",
											"        name:\"Hello\"",
											"    })",
											"",
											"var textVal_Field_Id = pm.collectionVariables.get(\"textVal_Field_Id\")",
											"if(textVal_Field_Id)",
											"    payload.customValues.push({",
											"        fieldId:textVal_Field_Id,",
											"        textVal:\"test textVal by API\"",
											"    })",
											"",
											"var numberVal_Field_Id = pm.collectionVariables.get(\"numberVal_Field_Id\")",
											"if(numberVal_Field_Id)",
											"    payload.customValues.push({",
											"        fieldId:numberVal_Field_Id,",
											"        numberVal: 12345",
											"    })",
											"",
											"var dateVal_Field_Id = pm.collectionVariables.get(\"dateVal_Field_Id\")",
											"if(numberVal_Field_Id)",
											"    payload.customValues.push({",
											"        fieldId:dateVal_Field_Id,",
											"        dateVal: \"2023-06-09\" ",
											"    })",
											"",
											"var toggleVal_Field_Id = pm.collectionVariables.get(\"toggleVal_Field_Id\")",
											"if(toggleVal_Field_Id)",
											"    payload.customValues.push({",
											"        fieldId:toggleVal_Field_Id,",
											"        toggleVal:\"Yes\" ",
											"    })  ",
											"",
											"// The demo of choice and array values will be provided in the next commit.",
											"",
											"",
											"//Table Values",
											"var equipmentEntries = pm.collectionVariables.get(\"equipmentEntries\")",
											"if(equipmentEntries)",
											"        payload.tabularValues.push({",
											"          \"table\": \"equipmentEntries\",",
											"          \"id\": \"d237d262-e5a6-4251-bc06-37f516dbed5c\",",
											"          \"columns\": [",
											"              {",
											"                  \"columnName\": \"item\",",
											"                  \"textVal\": \"Forklift\"",
											"              },",
											"              {",
											"                  \"columnName\": \"timespan\",",
											"                  \"timespanVal\": 7200000",
											"              },",
											"              {",
											"                  \"columnName\": \"quantity\",",
											"                  \"numberVal\": 1",
											"              },",
											"              {",
											"                  \"columnName\": \"description\",",
											"                  \"textVal\": \"Toyota 8FGCU25\"",
											"              }",
											"          ]",
											"      })",
											"",
											"var materialsEntries = pm.collectionVariables.get(\"materialsEntries\")",
											"if(materialsEntries)",
											"    payload.tabularValues.push(",
											"        {",
											"          \"table\": \"materialsEntries\",",
											"          \"id\": \"5b4fe828-fd45-4a9e-a660-6b70cb47c39f\",",
											"          \"columns\": [",
											"              {",
											"                  \"columnName\": \"item\",",
											"                  \"textVal\": \"Sand\"",
											"              },",
											"              {",
											"                  \"columnName\": \"quantity\",",
											"                  \"numberVal\": 2",
											"              },",
											"              {",
											"                  \"columnName\": \"unit\",",
											"                  \"textVal\": \"tons\"",
											"              },",
											"              {",
											"                  \"columnName\": \"description\",",
											"                  \"textVal\": \"fill for pool area\"",
											"              }",
											"          ]",
											"      }",
											"    ) ",
											"    ",
											"var worklogEntries = pm.collectionVariables.get(\"worklogEntries\")",
											"if(worklogEntries)",
											"    payload.tabularValues.push(",
											"        {",
											"          \"table\": \"worklogEntries\",",
											"          \"id\": \"e76fe3f4-f587-4309-92c4-6a6f14b9e1bd\",",
											"          \"columns\": [",
											"              {",
											"                  \"columnName\": \"trade\",",
											"                  \"textVal\": \"Electrical\"",
											"              },",
											"              {",
											"                  \"columnName\": \"timespan\",",
											"                  \"timespanVal\": 7200000",
											"              },",
											"              {",
											"                  \"columnName\": \"headcount\",",
											"                  \"numberVal\": 1",
											"              },",
											"              {",
											"                  \"columnName\": \"description\",",
											"                  \"textVal\": \"Room 302 lights\"",
											"              }",
											"          ]",
											"      }",
											"    )",
											"",
											"payload = JSON.stringify(payload)",
											"pm.collectionVariables.set(\"payload\",payload); ",
											"",
											"",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Step 4: Update the Form Fields, Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"}); ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{payload}}"
								},
								"url": {
									"raw": "{{APSBaseDomain}}construction/forms/v1/projects/:projectId/forms/:formId/values:batch-update",
									"host": [
										"{{APSBaseDomain}}construction"
									],
									"path": [
										"forms",
										"v1",
										"projects",
										":projectId",
										"forms",
										":formId",
										"values:batch-update"
									],
									"query": [
										{
											"key": "offset",
											"value": "0",
											"description": "The number of records to skip before returning the result records. Defaults to 0. Increase this value in subsequent requests to continue getting results when the number of records exceeds the requested limit.",
											"disabled": true
										},
										{
											"key": "updatedAfter",
											"value": "2021-02-28T00:00:00",
											"description": "Return Templates updated after specified time.",
											"disabled": true
										},
										{
											"key": "updatedBefore",
											"value": "<dateTime>",
											"description": "Return Templates updated before specified time.",
											"disabled": true
										},
										{
											"key": "sortOrder",
											"value": "<string>",
											"description": "Return Templates in specified sorted order. Possible values: desc, asc",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "50",
											"description": "The number of records to return in a single request. Can be a number between 1 and 50. Defaults to 50.\n",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{projectId}}",
											"description": "(Required) Unique identifier of the project."
										},
										{
											"key": "formId",
											"value": "{{formId}}"
										}
									]
								},
								"description": "Returns all project's form templates the user has access to."
							},
							"response": []
						},
						{
							"name": "Step 5: Submit the Form",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Step 5: Submit the Form, Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"}); ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"submitted\"\n  }"
								},
								"url": {
									"raw": "{{APSBaseDomain}}construction/forms/v1/projects/:projectId/form-templates/:templateId/forms/:formId",
									"host": [
										"{{APSBaseDomain}}construction"
									],
									"path": [
										"forms",
										"v1",
										"projects",
										":projectId",
										"form-templates",
										":templateId",
										"forms",
										":formId"
									],
									"query": [
										{
											"key": "offset",
											"value": "0",
											"description": "The number of records to skip before returning the result records. Defaults to 0. Increase this value in subsequent requests to continue getting results when the number of records exceeds the requested limit.",
											"disabled": true
										},
										{
											"key": "updatedAfter",
											"value": "2021-02-28T00:00:00",
											"description": "Return Templates updated after specified time.",
											"disabled": true
										},
										{
											"key": "updatedBefore",
											"value": "<dateTime>",
											"description": "Return Templates updated before specified time.",
											"disabled": true
										},
										{
											"key": "sortOrder",
											"value": "<string>",
											"description": "Return Templates in specified sorted order. Possible values: desc, asc",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "50",
											"description": "The number of records to return in a single request. Can be a number between 1 and 50. Defaults to 50.\n",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{projectId}}",
											"description": "(Required) Unique identifier of the project."
										},
										{
											"key": "templateId",
											"value": "{{templateId}}"
										},
										{
											"key": "formId",
											"value": "{{formId}}"
										}
									]
								},
								"description": "Returns all project's form templates the user has access to."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "API References",
			"item": [
				{
					"name": "Get Form Templates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Form Templates, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"find first template id: \", function () {",
									"    var body = JSON.parse(responseBody); ",
									"    pm.expect(body.data).not.eq(undefined); ",
									"",
									"    //to test with Update Field Values, find a non-PDF form",
									"    var nonPDFForm = body.data.find(i=>!i.isPdf)",
									"    if(nonPDFForm) ",
									"        pm.collectionVariables.set(\"templateId\",nonPDFForm.id) ",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{APSBaseDomain}}construction/forms/v1/projects/:projectId/form-templates",
							"host": [
								"{{APSBaseDomain}}construction"
							],
							"path": [
								"forms",
								"v1",
								"projects",
								":projectId",
								"form-templates"
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{projectId}}",
									"description": "(Required) Unique identifier of the project."
								}
							]
						},
						"description": "Returns all project's form templates the user has access to."
					},
					"response": []
				},
				{
					"name": "Get Forms",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Forms, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//you may get one form id for other tests",
									"pm.test(\"find first form id: \", function () {",
									"    var body = JSON.parse(responseBody); ",
									"    pm.expect(body.data).not.eq(undefined);  ",
									"",
									"    //pick any form for further test",
									"    //if(body.data && body.data.length >0){",
									"    //    pm.collectionVariables.set(\"formId\",body.data[0].id)  ",
									"    //}",
									"",
									"    //to test with Update Field Values, find a non-PDF form",
									"    if(body.data){",
									"        var non_pdf_form = body.data.find(i=>i.pdfValues == null)",
									"        if(non_pdf_form){",
									"",
									"     //get form id and ids of custom fields and tabular fields ",
									"    pm.collectionVariables.set(\"formId\",non_pdf_form.id);",
									"",
									"    //find first field of text value",
									"    var textVal_Field = non_pdf_form.customValues.find(i=>i.valueName == 'textVal');",
									"    if(textVal_Field)",
									"        pm.collectionVariables.set(\"textVal_Field_Id\",textVal_Field.fieldId);",
									"    ",
									"    //find first field of number value",
									"    var numberVal_Field = non_pdf_form.customValues.find(i=>i.valueName == 'numberVal');",
									"    if(numberVal_Field)",
									"        pm.collectionVariables.set(\"numberVal_Field_Id\",numberVal_Field.fieldId);",
									"",
									"    //find first field of date value",
									"    var dateVal_Field = non_pdf_form.customValues.find(i=>i.valueName == 'dateVal');",
									"    if(dateVal_Field)",
									"        pm.collectionVariables.set(\"dateVal_Field_Id\",dateVal_Field.fieldId);",
									"",
									"     //find first field of date value",
									"    var toggleVal_Field = non_pdf_form.customValues.find(i=>i.valueName == 'toggleVal');",
									"    if(toggleVal_Field)",
									"        pm.collectionVariables.set(\"toggleVal_Field_Id\",toggleVal_Field.fieldId);",
									"    ",
									"     //find signature field",
									"    var svgVal_Field = non_pdf_form.customValues.find(i=>i.valueName == 'svgVal');",
									"    if(svgVal_Field)",
									"        pm.collectionVariables.set(\"svgVal_Field_Id\",svgVal_Field.fieldId);",
									"",
									"     //find first field of choice value",
									"    var choiceVal_Field = non_pdf_form.customValues.find(i=>i.valueName == 'choiceVal_Field');",
									"    if(choiceVal_Field)",
									"        pm.collectionVariables.set(\"choiceVal_Field_Id\",choiceVal_Field.fieldId);",
									"    ",
									"    //find first field of array value",
									"    var arrayVal_Field = non_pdf_form.customValues.find(i=>i.valueName == 'arrayVal_Field');",
									"    if(arrayVal_Field)",
									"        pm.collectionVariables.set(\"arrayVal_Field_Id\",arrayVal_Field.fieldId);",
									"",
									"    //Table Values",
									"    //check if any table is defined",
									"    if(body.tabularValues && non_pdf_form.tabularValues.hasOwnProperty(\"equipmentEntries\"))",
									"        pm.collectionVariables.set(\"equipmentEntries\",true);",
									"    if(body.tabularValues && non_pdf_form.tabularValues.hasOwnProperty(\"materialsEntries\"))",
									"        pm.collectionVariables.set(\"materialsEntries\",true);",
									"     if(body.tabularValues && non_pdf_form.tabularValues.hasOwnProperty(\"worklogEntries\"))",
									"        pm.collectionVariables.set(\"worklogEntries\",true);",
									"        }",
									"    }",
									"",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IlU3c0dGRldUTzlBekNhSzBqZURRM2dQZXBURVdWN2VhIn0.eyJzY29wZSI6WyJhY2NvdW50OnJlYWQiLCJhY2NvdW50OndyaXRlIiwiYnVja2V0OmNyZWF0ZSIsImJ1Y2tldDpyZWFkIiwiYnVja2V0OnVwZGF0ZSIsImJ1Y2tldDpkZWxldGUiLCJkYXRhOnJlYWQiLCJkYXRhOndyaXRlIiwiZGF0YTpjcmVhdGUiLCJkYXRhOnNlYXJjaCIsInVzZXI6cmVhZCIsInVzZXI6d3JpdGUiLCJ1c2VyLXByb2ZpbGU6cmVhZCIsInZpZXdhYmxlczpyZWFkIl0sImNsaWVudF9pZCI6IktrSmZwTVoyZ2NBWEEzZ25EUkdod3Z5UDdaSG1tV25aIiwiYXVkIjoiaHR0cHM6Ly9hdXRvZGVzay5jb20vYXVkL2Fqd3RleHA2MCIsImp0aSI6Imk1S2ZOT1prRFNlWmtuRmxyT2VrNjNBVVVSOTZrMHc3VFc4VGxqUndYdWliYkRDeWRkNUU1aFRkSEV1UWtmajYiLCJ1c2VyaWQiOiJRRjQ1TlJXOE5LRzQiLCJleHAiOjE2MTE2MTk1OTJ9.BcZ08zvGqKaKN7h1nF2c9blVCbYq3TqHxKpeq-RXsaLJ6GuaJSC7q1pay91dl-jUzIan6a2yBJKgKDdLPNHmBU8_7X9qLRz0Rm9IhGPvq_t4FD16dggXxWBK6YwvoxQW7qO6X9-fK4V1-QFGUBISFwrd3uNnFx-YVxbvZuIXIeZDV2SJ6tG3zf0R5gLMR6QX9Ry2H1W8thnACa6_Mfp40J4KQFj9oHODvkBRFFfl6tf0L3p-0qt1Y8mJZ0CpSeEm6cavk43Nr0ZVzDeGyPvA4eSySk9g4vYx5scg4tMqYjggutlPQshXL5_Bgox_0fswEomykBVxIbGZZ9z8d5uwaw",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{APSBaseDomain}}/construction/forms/v1/projects/:projectId/forms",
							"host": [
								"{{APSBaseDomain}}"
							],
							"path": [
								"construction",
								"forms",
								"v1",
								"projects",
								":projectId",
								"forms"
							],
							"query": [
								{
									"key": "templateId",
									"value": "<string>",
									"description": "Return Forms on template with given ID.",
									"disabled": true
								},
								{
									"key": "statuses",
									"value": "draft",
									"description": "Return Forms with given statuses.",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{projectId}}",
									"description": "(Required) Unique identifier of the project."
								}
							]
						},
						"description": "Returns a paginated list of forms in a project. Forms are sorted by updatedAt, most recent first."
					},
					"response": []
				},
				{
					"name": "POST Form",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var d = new Date()",
									"var current_date_time = d.getFullYear() ",
									"                +\"-\" + ((\"0\" + (d.getUTCMonth()+1)).slice(-2) )",
									"                + \"-\" +  (\"0\" + d.getUTCDate()).slice(-2)",
									"                + \"-\" +  (\"0\" + d.getHours()).slice(-2) ",
									"                + \"-\" +  (\"0\" + d.getMinutes()).slice(-2)",
									"",
									"pm.collectionVariables.set(\"current_date_time\", current_date_time);",
									"  "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create Forms, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    var body = JSON.parse(responseBody); ",
									"",
									"    //get form id and ids of custom fields and tabular fields ",
									"    pm.collectionVariables.set(\"formId\",body.id);",
									"",
									"    //find first field of text value",
									"    var textVal_Field = body.customValues.find(i=>i.valueName == 'textVal');",
									"    if(textVal_Field)",
									"        pm.collectionVariables.set(\"textVal_Field_Id\",textVal_Field.fieldId);",
									"    ",
									"    //find first field of number value",
									"    var numberVal_Field = body.customValues.find(i=>i.valueName == 'numberVal');",
									"    if(numberVal_Field)",
									"        pm.collectionVariables.set(\"numberVal_Field_Id\",numberVal_Field.fieldId);",
									"",
									"    //find first field of date value",
									"    var dateVal_Field = body.customValues.find(i=>i.valueName == 'dateVal');",
									"    if(dateVal_Field)",
									"        pm.collectionVariables.set(\"dateVal_Field_Id\",dateVal_Field.fieldId);",
									"",
									"     //find first field of date value",
									"    var toggleVal_Field = body.customValues.find(i=>i.valueName == 'toggleVal');",
									"    if(toggleVal_Field)",
									"        pm.collectionVariables.set(\"toggleVal_Field_Id\",toggleVal_Field.fieldId);",
									"    ",
									"     //find signature field",
									"    var svgVal_Field = body.customValues.find(i=>i.valueName == 'svgVal');",
									"    if(svgVal_Field)",
									"        pm.collectionVariables.set(\"svgVal_Field_Id\",svgVal_Field.fieldId);",
									"",
									"     //find first field of choice value",
									"    var choiceVal_Field = body.customValues.find(i=>i.valueName == 'choiceVal_Field');",
									"    if(choiceVal_Field)",
									"        pm.collectionVariables.set(\"choiceVal_Field_Id\",choiceVal_Field.fieldId);",
									"    ",
									"    //find first field of array value",
									"    var arrayVal_Field = body.customValues.find(i=>i.valueName == 'arrayVal_Field');",
									"    if(arrayVal_Field)",
									"        pm.collectionVariables.set(\"arrayVal_Field_Id\",arrayVal_Field.fieldId);",
									"",
									"    //Table Values",
									"    //check if any table is defined",
									"    if(body.tabularValues && body.tabularValues.hasOwnProperty(\"equipmentEntries\"))",
									"        pm.collectionVariables.set(\"equipmentEntries\",true);",
									"    if(body.tabularValues && body.tabularValues.hasOwnProperty(\"materialsEntries\"))",
									"        pm.collectionVariables.set(\"materialsEntries\",true);",
									"     if(body.tabularValues && body.tabularValues.hasOwnProperty(\"worklogEntries\"))",
									"        pm.collectionVariables.set(\"worklogEntries\",true); ",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\":\"Create Forms by API\",\n    \"notes\":\"Create Forms by API\",\n    \"formDate\":\"{{current_date_time}}\",\n    \"userCreatedAt\": \"2023-01-01T20:38:32+00:00\",\n\n    \"assigneeId\": \"{{assignee_id}}\", \n    \"assigneeType\": \"user\" ,\n    \"locationId\":\"{{locationId}}\"\n}"
						},
						"url": {
							"raw": "{{APSBaseDomain}}construction/forms/v1/projects/:projectId/form-templates/:templateId/forms",
							"host": [
								"{{APSBaseDomain}}construction"
							],
							"path": [
								"forms",
								"v1",
								"projects",
								":projectId",
								"form-templates",
								":templateId",
								"forms"
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{projectId}}",
									"description": "(Required) Unique identifier of the project."
								},
								{
									"key": "templateId",
									"value": "{{templateId}}"
								}
							]
						},
						"description": "Returns all project's form templates the user has access to."
					},
					"response": []
				},
				{
					"name": "Update  Text,Number,Date,Toggle Values of non-PDF Form",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update  Text,Number,Date,Toggle Values of non-PDF Form, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n     \"customValues\": [ \n        {\n            \"fieldId\": \"{{textVal_Field_Id}}\",\n            \"textVal\":\"My Test Text by API\"\n        },\n        {\n            \"fieldId\": \"{{numberVal_Field_Id}}\",\n            \"numberVal\": 56789\n        },\n        {\n            \"fieldId\": \"{{dateVal_Field_Id}}\",\n            \"dateVal\": \"2023-09-09\"\n        } ,\n        {\n            \"fieldId\": \"{{toggleVal_Field_Id}}\",\n            \"toggleVal\": \"No\"\n        }\n     ] \n}"
						},
						"url": {
							"raw": "{{APSBaseDomain}}construction/forms/v1/projects/:projectId/forms/:formId/values:batch-update",
							"host": [
								"{{APSBaseDomain}}construction"
							],
							"path": [
								"forms",
								"v1",
								"projects",
								":projectId",
								"forms",
								":formId",
								"values:batch-update"
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{projectId}}",
									"description": "(Required) Unique identifier of the project."
								},
								{
									"key": "formId",
									"value": "{{formId}}"
								}
							]
						},
						"description": "Returns all project's form templates the user has access to."
					},
					"response": []
				},
				{
					"name": "Update  Signature Values of non-PDF Form",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update  Signature Values of non-PDF Form, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n     \"customValues\": [ \n        {\n        \"fieldId\":\"{{svgVal_Field_Id}}\",\n        \"svgVal\":\"\",\n        \"name\":\"Hello\"\n       }\n     ] \n}"
						},
						"url": {
							"raw": "{{APSBaseDomain}}construction/forms/v1/projects/:projectId/forms/:formId/values:batch-update",
							"host": [
								"{{APSBaseDomain}}construction"
							],
							"path": [
								"forms",
								"v1",
								"projects",
								":projectId",
								"forms",
								":formId",
								"values:batch-update"
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{projectId}}"
								},
								{
									"key": "formId",
									"value": "{{formId}}"
								}
							]
						},
						"description": "Returns all project's form templates the user has access to."
					},
					"response": []
				},
				{
					"name": "Update  Choice,Array Values of non-PDF Form",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "This demo will be comming soon",
							"host": [
								"This demo will be comming soon"
							]
						},
						"description": "Returns all project's form templates the user has access to."
					},
					"response": []
				},
				{
					"name": "Update Tabular Values of non-PDF Form",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update Tabular Values of non-PDF Form, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"tabularValues\":[\n         {\n          \"table\": \"materialsEntries\",\n          \"id\": \"5b4fe828-fd45-4a9e-a660-6b70cb47c39f\",\n          \"columns\": [\n              {\n                  \"columnName\": \"item\",\n                  \"textVal\": \"Sand\"\n              },\n              {\n                  \"columnName\": \"quantity\",\n                  \"numberVal\": 2\n              },\n              {\n                  \"columnName\": \"unit\",\n                  \"textVal\": \"tons\"\n              },\n              {\n                  \"columnName\": \"description\",\n                  \"textVal\": \"fill for pool area\"\n              }\n          ]\n      },\n\n      {\n          \"table\": \"equipmentEntries\",\n          \"id\": \"d237d262-e5a6-4251-bc06-37f516dbed5c\",\n          \"columns\": [\n              {\n                  \"columnName\": \"item\",\n                  \"textVal\": \"Forklift\"\n              },\n              {\n                  \"columnName\": \"timespan\",\n                  \"timespanVal\": 7200000\n              },\n              {\n                  \"columnName\": \"quantity\",\n                  \"numberVal\": 1\n              },\n              {\n                  \"columnName\": \"description\",\n                  \"textVal\": \"Toyota 8FGCU25\"\n              }\n          ]\n      },\n      {\n          \"table\": \"worklogEntries\",\n          \"id\": \"e76fe3f4-f587-4309-92c4-6a6f14b9e1bd\",\n          \"columns\": [\n              {\n                  \"columnName\": \"trade\",\n                  \"textVal\": \"Electrical\"\n              },\n              {\n                  \"columnName\": \"timespan\",\n                  \"timespanVal\": 7200000\n              },\n              {\n                  \"columnName\": \"headcount\",\n                  \"numberVal\": 1\n              },\n              {\n                  \"columnName\": \"description\",\n                  \"textVal\": \"Room 302 lights\"\n              }\n          ]\n      }\n     ]\n}"
						},
						"url": {
							"raw": "{{APSBaseDomain}}construction/forms/v1/projects/:projectId/forms/:formId/values:batch-update",
							"host": [
								"{{APSBaseDomain}}construction"
							],
							"path": [
								"forms",
								"v1",
								"projects",
								":projectId",
								"forms",
								":formId",
								"values:batch-update"
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{projectId}}",
									"description": "(Required) Unique identifier of the project."
								},
								{
									"key": "formId",
									"value": "{{formId}}"
								}
							]
						},
						"description": "Returns all project's form templates the user has access to."
					},
					"response": []
				},
				{
					"name": "PATCH Form",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"submitted\",\n    \"notes\":\"This is to update notes of form by API\"\n    //more attributes can also be updated\n}"
						},
						"url": {
							"raw": "{{APSBaseDomain}}construction/forms/v1/projects/:projectId/form-templates/:templateId/forms/:formId",
							"host": [
								"{{APSBaseDomain}}construction"
							],
							"path": [
								"forms",
								"v1",
								"projects",
								":projectId",
								"form-templates",
								":templateId",
								"forms",
								":formId"
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{projectId}}",
									"description": "(Required) Unique identifier of the project."
								},
								{
									"key": "templateId",
									"value": "{{templateId}}"
								},
								{
									"key": "formId",
									"value": "{{formId}}"
								}
							]
						},
						"description": "Returns all project's form templates the user has access to."
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "scope",
				"value": "data:read data:write",
				"type": "string"
			},
			{
				"key": "clientSecret",
				"value": "{{clientSecret}}",
				"type": "string"
			},
			{
				"key": "client_authentication",
				"value": "header",
				"type": "string"
			},
			{
				"key": "clientId",
				"value": "{{clientId}}",
				"type": "string"
			},
			{
				"key": "accessTokenUrl",
				"value": "https://developer.api.autodesk.com/authentication/v2/token",
				"type": "string"
			},
			{
				"key": "authUrl",
				"value": "https://developer.api.autodesk.com/authentication/v2/authorize",
				"type": "string"
			},
			{
				"key": "tokenName",
				"value": "access_token",
				"type": "string"
			},
			{
				"key": "redirect_uri",
				"value": "https://www.getpostman.com/oauth2/callback",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "APSBaseDomain",
			"value": "",
			"type": "string"
		},
		{
			"key": "clientId",
			"value": "",
			"type": "string"
		},
		{
			"key": "clientSecret",
			"value": "",
			"type": "string"
		},
		{
			"key": "accountName",
			"value": "",
			"type": "string"
		},
		{
			"key": "projectName",
			"value": "",
			"type": "string"
		},
		{
			"key": "one_user_email_as_assignee",
			"value": "",
			"type": "string"
		},
		{
			"key": "accountId",
			"value": ""
		},
		{
			"key": "projectId",
			"value": "",
			"type": "string"
		},
		{
			"key": "locationId",
			"value": ""
		},
		{
			"key": "assignee_id",
			"value": ""
		},
		{
			"key": "formId",
			"value": ""
		},
		{
			"key": "templateId",
			"value": "",
			"type": "string"
		}
	]
}